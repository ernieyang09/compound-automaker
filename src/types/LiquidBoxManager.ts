/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common.js";

export interface LiquidBoxManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "WETH9"
      | "addBoxParam"
      | "balanceOf"
      | "boxParams"
      | "checkPriceChange"
      | "claimFees"
      | "claimManagementFees"
      | "deposit"
      | "factory"
      | "feeRecipient"
      | "getBox"
      | "getClaimableFees"
      | "getLimits"
      | "getManagementFees"
      | "getRequiredAmountsForInput"
      | "getSharesAmount"
      | "getTotalAmounts"
      | "initialize"
      | "manager"
      | "owner"
      | "priceThreshold"
      | "pullLiquidity"
      | "rebalance"
      | "renounceOwnership"
      | "setBoxPriceThreshold"
      | "setFactory"
      | "setFeeRecipient"
      | "setManager"
      | "setPriceThreshold"
      | "setTwapInterval"
      | "setTwapOverride"
      | "toggleTwap"
      | "transferOwnership"
      | "twapInterval"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BoxParamAdded"
      | "BoxPriceThresholdUpdated"
      | "ClaimFees"
      | "ClaimManagementFee"
      | "Deposit"
      | "FactoryChanged"
      | "FeeRecipientChanged"
      | "Initialized"
      | "ManagerChanged"
      | "OwnershipTransferred"
      | "PriceThresholdUpdated"
      | "Rebalance"
      | "TwapIntervalUpdated"
      | "TwapOverrideUpdated"
      | "TwapToggled"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addBoxParam",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "boxParams",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPriceChange",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFees",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimManagementFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBox",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableFees",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLimits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getManagementFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredAmountsForInput",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSharesAmount",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAmounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pullLiquidity",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalance",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBoxPriceThreshold",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTwapInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTwapOverride",
    values: [AddressLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleTwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "twapInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addBoxParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boxParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkPriceChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimManagementFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLimits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getManagementFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredAmountsForInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSharesAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pullLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBoxPriceThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPriceThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTwapInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTwapOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toggleTwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "twapInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace BoxParamAddedEvent {
  export type InputTuple = [box: AddressLike, version: BigNumberish];
  export type OutputTuple = [box: string, version: bigint];
  export interface OutputObject {
    box: string;
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BoxPriceThresholdUpdatedEvent {
  export type InputTuple = [box: AddressLike, priceThreshold: BigNumberish];
  export type OutputTuple = [box: string, priceThreshold: bigint];
  export interface OutputObject {
    box: string;
    priceThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimFeesEvent {
  export type InputTuple = [
    box: AddressLike,
    to: AddressLike,
    feesToOwner0: BigNumberish,
    feesToOwner1: BigNumberish
  ];
  export type OutputTuple = [
    box: string,
    to: string,
    feesToOwner0: bigint,
    feesToOwner1: bigint
  ];
  export interface OutputObject {
    box: string;
    to: string;
    feesToOwner0: bigint;
    feesToOwner1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimManagementFeeEvent {
  export type InputTuple = [
    box: AddressLike,
    to: AddressLike,
    feesToOwner0: BigNumberish,
    feesToOwner1: BigNumberish,
    collectedFeeOnEmission: BigNumberish
  ];
  export type OutputTuple = [
    box: string,
    to: string,
    feesToOwner0: bigint,
    feesToOwner1: bigint,
    collectedFeeOnEmission: bigint
  ];
  export interface OutputObject {
    box: string;
    to: string;
    feesToOwner0: bigint;
    feesToOwner1: bigint;
    collectedFeeOnEmission: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    box: AddressLike,
    to: AddressLike,
    shares: BigNumberish,
    amount0: BigNumberish,
    amount1: BigNumberish
  ];
  export type OutputTuple = [
    box: string,
    to: string,
    shares: bigint,
    amount0: bigint,
    amount1: bigint
  ];
  export interface OutputObject {
    box: string;
    to: string;
    shares: bigint;
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FactoryChangedEvent {
  export type InputTuple = [factory: AddressLike];
  export type OutputTuple = [factory: string];
  export interface OutputObject {
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeRecipientChangedEvent {
  export type InputTuple = [recipient: AddressLike];
  export type OutputTuple = [recipient: string];
  export interface OutputObject {
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ManagerChangedEvent {
  export type InputTuple = [manager: AddressLike];
  export type OutputTuple = [manager: string];
  export interface OutputObject {
    manager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceThresholdUpdatedEvent {
  export type InputTuple = [threshold: BigNumberish];
  export type OutputTuple = [threshold: bigint];
  export interface OutputObject {
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalanceEvent {
  export type InputTuple = [
    box: AddressLike,
    baseLower: BigNumberish,
    baseUpper: BigNumberish,
    amount0Min: BigNumberish,
    amount1Min: BigNumberish
  ];
  export type OutputTuple = [
    box: string,
    baseLower: bigint,
    baseUpper: bigint,
    amount0Min: bigint,
    amount1Min: bigint
  ];
  export interface OutputObject {
    box: string;
    baseLower: bigint;
    baseUpper: bigint;
    amount0Min: bigint;
    amount1Min: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TwapIntervalUpdatedEvent {
  export type InputTuple = [twapInterval: BigNumberish];
  export type OutputTuple = [twapInterval: bigint];
  export interface OutputObject {
    twapInterval: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TwapOverrideUpdatedEvent {
  export type InputTuple = [
    box: AddressLike,
    twapOverride: boolean,
    twapInterval: BigNumberish
  ];
  export type OutputTuple = [
    box: string,
    twapOverride: boolean,
    twapInterval: bigint
  ];
  export interface OutputObject {
    box: string;
    twapOverride: boolean;
    twapInterval: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TwapToggledEvent {
  export type InputTuple = [isTwap: boolean];
  export type OutputTuple = [isTwap: boolean];
  export interface OutputObject {
    isTwap: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    box: AddressLike,
    to: AddressLike,
    shares: BigNumberish,
    amount0: BigNumberish,
    amount1: BigNumberish
  ];
  export type OutputTuple = [
    box: string,
    to: string,
    shares: bigint,
    amount0: bigint,
    amount1: bigint
  ];
  export interface OutputObject {
    box: string;
    to: string;
    shares: bigint;
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LiquidBoxManager extends BaseContract {
  connect(runner?: ContractRunner | null): LiquidBoxManager;
  waitForDeployment(): Promise<this>;

  interface: LiquidBoxManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  WETH9: TypedContractMethod<[], [string], "view">;

  addBoxParam: TypedContractMethod<
    [box: AddressLike, version: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<
    [box: AddressLike, to: AddressLike],
    [bigint],
    "view"
  >;

  boxParams: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, boolean, bigint, bigint] & {
        version: bigint;
        twapOverride: boolean;
        twapInterval: bigint;
        priceThreshold: bigint;
      }
    ],
    "view"
  >;

  checkPriceChange: TypedContractMethod<
    [
      box: AddressLike,
      _twapInterval: BigNumberish,
      _priceThreshold: BigNumberish
    ],
    [bigint],
    "view"
  >;

  claimFees: TypedContractMethod<
    [box: AddressLike, to: AddressLike],
    [[bigint, bigint] & { collectedfees0: bigint; collectedfees1: bigint }],
    "nonpayable"
  >;

  claimManagementFees: TypedContractMethod<
    [box: AddressLike],
    [
      [bigint, bigint, bigint] & {
        collectedfees0: bigint;
        collectedfees1: bigint;
        collectedEmission: bigint;
      }
    ],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [
      box: AddressLike,
      deposit0: BigNumberish,
      deposit1: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  factory: TypedContractMethod<[], [string], "view">;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  getBox: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, fee: BigNumberish],
    [string],
    "view"
  >;

  getClaimableFees: TypedContractMethod<
    [box: AddressLike, to: AddressLike],
    [[bigint, bigint] & { claimable0: bigint; claimable1: bigint }],
    "view"
  >;

  getLimits: TypedContractMethod<
    [box: AddressLike],
    [[bigint, bigint] & { baseLower: bigint; baseUpper: bigint }],
    "view"
  >;

  getManagementFees: TypedContractMethod<
    [box: AddressLike],
    [
      [bigint, bigint, bigint] & {
        claimable0: bigint;
        claimable1: bigint;
        emission: bigint;
      }
    ],
    "view"
  >;

  getRequiredAmountsForInput: TypedContractMethod<
    [box: AddressLike, deposit0: BigNumberish, deposit1: BigNumberish],
    [[bigint, bigint] & { required0: bigint; required1: bigint }],
    "view"
  >;

  getSharesAmount: TypedContractMethod<
    [box: AddressLike, to: AddressLike],
    [
      [bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        liquidity: bigint;
      }
    ],
    "view"
  >;

  getTotalAmounts: TypedContractMethod<
    [box: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        total0: bigint;
        total1: bigint;
        pool0: bigint;
        pool1: bigint;
        liquidity: bigint;
      }
    ],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _intialOwner: AddressLike,
      _feeRecipient: AddressLike,
      _factory: AddressLike,
      _weth9: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  manager: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  priceThreshold: TypedContractMethod<[], [bigint], "view">;

  pullLiquidity: TypedContractMethod<
    [
      box: AddressLike,
      baseLower: BigNumberish,
      baseUpper: BigNumberish,
      shares: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  rebalance: TypedContractMethod<
    [
      box: AddressLike,
      baseLower: BigNumberish,
      baseUpper: BigNumberish,
      amount0MinBurn: BigNumberish,
      amount1MinBurn: BigNumberish,
      amount0MinMint: BigNumberish,
      amount1MinMint: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setBoxPriceThreshold: TypedContractMethod<
    [box: AddressLike, _priceThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFactory: TypedContractMethod<
    [_factory: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeeRecipient: TypedContractMethod<
    [_feeRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setManager: TypedContractMethod<
    [_manager: AddressLike],
    [void],
    "nonpayable"
  >;

  setPriceThreshold: TypedContractMethod<
    [_priceThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTwapInterval: TypedContractMethod<
    [_twapInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTwapOverride: TypedContractMethod<
    [box: AddressLike, twapOverride: boolean, _twapInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  toggleTwap: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  twapInterval: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<
    [
      box: AddressLike,
      shares: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish
    ],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "WETH9"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addBoxParam"
  ): TypedContractMethod<
    [box: AddressLike, version: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[box: AddressLike, to: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "boxParams"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, boolean, bigint, bigint] & {
        version: bigint;
        twapOverride: boolean;
        twapInterval: bigint;
        priceThreshold: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkPriceChange"
  ): TypedContractMethod<
    [
      box: AddressLike,
      _twapInterval: BigNumberish,
      _priceThreshold: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimFees"
  ): TypedContractMethod<
    [box: AddressLike, to: AddressLike],
    [[bigint, bigint] & { collectedfees0: bigint; collectedfees1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimManagementFees"
  ): TypedContractMethod<
    [box: AddressLike],
    [
      [bigint, bigint, bigint] & {
        collectedfees0: bigint;
        collectedfees1: bigint;
        collectedEmission: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      box: AddressLike,
      deposit0: BigNumberish,
      deposit1: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBox"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, fee: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClaimableFees"
  ): TypedContractMethod<
    [box: AddressLike, to: AddressLike],
    [[bigint, bigint] & { claimable0: bigint; claimable1: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLimits"
  ): TypedContractMethod<
    [box: AddressLike],
    [[bigint, bigint] & { baseLower: bigint; baseUpper: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getManagementFees"
  ): TypedContractMethod<
    [box: AddressLike],
    [
      [bigint, bigint, bigint] & {
        claimable0: bigint;
        claimable1: bigint;
        emission: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRequiredAmountsForInput"
  ): TypedContractMethod<
    [box: AddressLike, deposit0: BigNumberish, deposit1: BigNumberish],
    [[bigint, bigint] & { required0: bigint; required1: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSharesAmount"
  ): TypedContractMethod<
    [box: AddressLike, to: AddressLike],
    [
      [bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        liquidity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalAmounts"
  ): TypedContractMethod<
    [box: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        total0: bigint;
        total1: bigint;
        pool0: bigint;
        pool1: bigint;
        liquidity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _intialOwner: AddressLike,
      _feeRecipient: AddressLike,
      _factory: AddressLike,
      _weth9: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "manager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pullLiquidity"
  ): TypedContractMethod<
    [
      box: AddressLike,
      baseLower: BigNumberish,
      baseUpper: BigNumberish,
      shares: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rebalance"
  ): TypedContractMethod<
    [
      box: AddressLike,
      baseLower: BigNumberish,
      baseUpper: BigNumberish,
      amount0MinBurn: BigNumberish,
      amount1MinBurn: BigNumberish,
      amount0MinMint: BigNumberish,
      amount1MinMint: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBoxPriceThreshold"
  ): TypedContractMethod<
    [box: AddressLike, _priceThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFactory"
  ): TypedContractMethod<[_factory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeRecipient"
  ): TypedContractMethod<[_feeRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setManager"
  ): TypedContractMethod<[_manager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPriceThreshold"
  ): TypedContractMethod<[_priceThreshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTwapInterval"
  ): TypedContractMethod<[_twapInterval: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTwapOverride"
  ): TypedContractMethod<
    [box: AddressLike, twapOverride: boolean, _twapInterval: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "toggleTwap"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "twapInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      box: AddressLike,
      shares: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish
    ],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  getEvent(
    key: "BoxParamAdded"
  ): TypedContractEvent<
    BoxParamAddedEvent.InputTuple,
    BoxParamAddedEvent.OutputTuple,
    BoxParamAddedEvent.OutputObject
  >;
  getEvent(
    key: "BoxPriceThresholdUpdated"
  ): TypedContractEvent<
    BoxPriceThresholdUpdatedEvent.InputTuple,
    BoxPriceThresholdUpdatedEvent.OutputTuple,
    BoxPriceThresholdUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimFees"
  ): TypedContractEvent<
    ClaimFeesEvent.InputTuple,
    ClaimFeesEvent.OutputTuple,
    ClaimFeesEvent.OutputObject
  >;
  getEvent(
    key: "ClaimManagementFee"
  ): TypedContractEvent<
    ClaimManagementFeeEvent.InputTuple,
    ClaimManagementFeeEvent.OutputTuple,
    ClaimManagementFeeEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "FactoryChanged"
  ): TypedContractEvent<
    FactoryChangedEvent.InputTuple,
    FactoryChangedEvent.OutputTuple,
    FactoryChangedEvent.OutputObject
  >;
  getEvent(
    key: "FeeRecipientChanged"
  ): TypedContractEvent<
    FeeRecipientChangedEvent.InputTuple,
    FeeRecipientChangedEvent.OutputTuple,
    FeeRecipientChangedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "ManagerChanged"
  ): TypedContractEvent<
    ManagerChangedEvent.InputTuple,
    ManagerChangedEvent.OutputTuple,
    ManagerChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PriceThresholdUpdated"
  ): TypedContractEvent<
    PriceThresholdUpdatedEvent.InputTuple,
    PriceThresholdUpdatedEvent.OutputTuple,
    PriceThresholdUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Rebalance"
  ): TypedContractEvent<
    RebalanceEvent.InputTuple,
    RebalanceEvent.OutputTuple,
    RebalanceEvent.OutputObject
  >;
  getEvent(
    key: "TwapIntervalUpdated"
  ): TypedContractEvent<
    TwapIntervalUpdatedEvent.InputTuple,
    TwapIntervalUpdatedEvent.OutputTuple,
    TwapIntervalUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TwapOverrideUpdated"
  ): TypedContractEvent<
    TwapOverrideUpdatedEvent.InputTuple,
    TwapOverrideUpdatedEvent.OutputTuple,
    TwapOverrideUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TwapToggled"
  ): TypedContractEvent<
    TwapToggledEvent.InputTuple,
    TwapToggledEvent.OutputTuple,
    TwapToggledEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "BoxParamAdded(address,uint8)": TypedContractEvent<
      BoxParamAddedEvent.InputTuple,
      BoxParamAddedEvent.OutputTuple,
      BoxParamAddedEvent.OutputObject
    >;
    BoxParamAdded: TypedContractEvent<
      BoxParamAddedEvent.InputTuple,
      BoxParamAddedEvent.OutputTuple,
      BoxParamAddedEvent.OutputObject
    >;

    "BoxPriceThresholdUpdated(address,uint256)": TypedContractEvent<
      BoxPriceThresholdUpdatedEvent.InputTuple,
      BoxPriceThresholdUpdatedEvent.OutputTuple,
      BoxPriceThresholdUpdatedEvent.OutputObject
    >;
    BoxPriceThresholdUpdated: TypedContractEvent<
      BoxPriceThresholdUpdatedEvent.InputTuple,
      BoxPriceThresholdUpdatedEvent.OutputTuple,
      BoxPriceThresholdUpdatedEvent.OutputObject
    >;

    "ClaimFees(address,address,uint256,uint256)": TypedContractEvent<
      ClaimFeesEvent.InputTuple,
      ClaimFeesEvent.OutputTuple,
      ClaimFeesEvent.OutputObject
    >;
    ClaimFees: TypedContractEvent<
      ClaimFeesEvent.InputTuple,
      ClaimFeesEvent.OutputTuple,
      ClaimFeesEvent.OutputObject
    >;

    "ClaimManagementFee(address,address,uint256,uint256,uint256)": TypedContractEvent<
      ClaimManagementFeeEvent.InputTuple,
      ClaimManagementFeeEvent.OutputTuple,
      ClaimManagementFeeEvent.OutputObject
    >;
    ClaimManagementFee: TypedContractEvent<
      ClaimManagementFeeEvent.InputTuple,
      ClaimManagementFeeEvent.OutputTuple,
      ClaimManagementFeeEvent.OutputObject
    >;

    "Deposit(address,address,uint256,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "FactoryChanged(address)": TypedContractEvent<
      FactoryChangedEvent.InputTuple,
      FactoryChangedEvent.OutputTuple,
      FactoryChangedEvent.OutputObject
    >;
    FactoryChanged: TypedContractEvent<
      FactoryChangedEvent.InputTuple,
      FactoryChangedEvent.OutputTuple,
      FactoryChangedEvent.OutputObject
    >;

    "FeeRecipientChanged(address)": TypedContractEvent<
      FeeRecipientChangedEvent.InputTuple,
      FeeRecipientChangedEvent.OutputTuple,
      FeeRecipientChangedEvent.OutputObject
    >;
    FeeRecipientChanged: TypedContractEvent<
      FeeRecipientChangedEvent.InputTuple,
      FeeRecipientChangedEvent.OutputTuple,
      FeeRecipientChangedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "ManagerChanged(address)": TypedContractEvent<
      ManagerChangedEvent.InputTuple,
      ManagerChangedEvent.OutputTuple,
      ManagerChangedEvent.OutputObject
    >;
    ManagerChanged: TypedContractEvent<
      ManagerChangedEvent.InputTuple,
      ManagerChangedEvent.OutputTuple,
      ManagerChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PriceThresholdUpdated(uint256)": TypedContractEvent<
      PriceThresholdUpdatedEvent.InputTuple,
      PriceThresholdUpdatedEvent.OutputTuple,
      PriceThresholdUpdatedEvent.OutputObject
    >;
    PriceThresholdUpdated: TypedContractEvent<
      PriceThresholdUpdatedEvent.InputTuple,
      PriceThresholdUpdatedEvent.OutputTuple,
      PriceThresholdUpdatedEvent.OutputObject
    >;

    "Rebalance(address,int24,int24,uint256,uint256)": TypedContractEvent<
      RebalanceEvent.InputTuple,
      RebalanceEvent.OutputTuple,
      RebalanceEvent.OutputObject
    >;
    Rebalance: TypedContractEvent<
      RebalanceEvent.InputTuple,
      RebalanceEvent.OutputTuple,
      RebalanceEvent.OutputObject
    >;

    "TwapIntervalUpdated(uint32)": TypedContractEvent<
      TwapIntervalUpdatedEvent.InputTuple,
      TwapIntervalUpdatedEvent.OutputTuple,
      TwapIntervalUpdatedEvent.OutputObject
    >;
    TwapIntervalUpdated: TypedContractEvent<
      TwapIntervalUpdatedEvent.InputTuple,
      TwapIntervalUpdatedEvent.OutputTuple,
      TwapIntervalUpdatedEvent.OutputObject
    >;

    "TwapOverrideUpdated(address,bool,uint32)": TypedContractEvent<
      TwapOverrideUpdatedEvent.InputTuple,
      TwapOverrideUpdatedEvent.OutputTuple,
      TwapOverrideUpdatedEvent.OutputObject
    >;
    TwapOverrideUpdated: TypedContractEvent<
      TwapOverrideUpdatedEvent.InputTuple,
      TwapOverrideUpdatedEvent.OutputTuple,
      TwapOverrideUpdatedEvent.OutputObject
    >;

    "TwapToggled(bool)": TypedContractEvent<
      TwapToggledEvent.InputTuple,
      TwapToggledEvent.OutputTuple,
      TwapToggledEvent.OutputObject
    >;
    TwapToggled: TypedContractEvent<
      TwapToggledEvent.InputTuple,
      TwapToggledEvent.OutputTuple,
      TwapToggledEvent.OutputObject
    >;

    "Withdraw(address,address,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
