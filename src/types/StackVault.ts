/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common.js";

export interface StackVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_BORROW_OPENING_FEE"
      | "DEFAULT_FLASHLOAN_FEE"
      | "DEFAULT_MINIMUM_BORROW_AMOUNT"
      | "UPGRADE_INTERFACE_VERSION"
      | "accrueInterest"
      | "borrow"
      | "borrowLimit"
      | "borrowOpeningFee"
      | "borrowToken"
      | "borrowTokenOracle"
      | "closeBadDebtPosition"
      | "closePosition"
      | "collateralToken"
      | "collateralTokenOracle"
      | "decreaseBorrowLimit"
      | "deleverage"
      | "depositCollateral"
      | "increaseBorrowLimit"
      | "initialize"
      | "interestRateMultiplier"
      | "interestRatePerSecond"
      | "isRetired"
      | "leverage"
      | "liquidate"
      | "liquidationPenaltyFee"
      | "liquidationThreshold"
      | "mimimumBorrowAmount"
      | "multicall"
      | "onFlashLoan"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "repay(address,uint256)"
      | "repay(address)"
      | "retire"
      | "revive"
      | "setBorrowOpeningFee"
      | "setBorrowTokenOracle"
      | "setBorrowTokenOracleMaxPriceAge"
      | "setCollateralTokenOracle"
      | "setCollateralTokenOracleMaxPriceAge"
      | "setInterestRateMultiplier"
      | "setLiquidationPenaltyFee"
      | "setLiquidationThreshold"
      | "setMinimumBorrowAmount"
      | "totalBorrowAmount"
      | "totalCollateralAmount"
      | "transferOwnership"
      | "upgradeToAndCall"
      | "userBorrowShare"
      | "userCollateralShare"
      | "userPositionInfo"
      | "withdrawCollateral(address,uint256)"
      | "withdrawCollateral(address)"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BadDebtPositionClosed"
      | "BorrowLimitUpdated"
      | "BorrowOpeningFeeUpdated"
      | "BorrowTokenOracleUpdated"
      | "Borrowed"
      | "CollateralDeposited"
      | "CollateralTokenOracleUpdated"
      | "CollateralWithdrawn"
      | "Deleveraged"
      | "Initialized"
      | "InterestAccrued"
      | "InterestRateMultiplierUpdated"
      | "Leveraged"
      | "Liquidated"
      | "LiquidationPenaltyFeeUpdated"
      | "LiquidationThresholdUpdated"
      | "OwnershipTransferred"
      | "PositionClosed"
      | "Repaid"
      | "Swap"
      | "Upgraded"
      | "VaultRetired"
      | "VaultRevived"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_BORROW_OPENING_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_FLASHLOAN_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_MINIMUM_BORROW_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accrueInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowOpeningFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowTokenOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeBadDebtPosition",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralTokenOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseBorrowLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleverage",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseBorrowLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRateMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestRatePerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isRetired", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "leverage",
    values: [BigNumberish, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationPenaltyFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mimimumBorrowAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onFlashLoan",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repay(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "retire", values?: undefined): string;
  encodeFunctionData(functionFragment: "revive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBorrowOpeningFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowTokenOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowTokenOracleMaxPriceAge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralTokenOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralTokenOracleMaxPriceAge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestRateMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationPenaltyFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumBorrowAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrowAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollateralAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userBorrowShare",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userCollateralShare",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userPositionInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral(address)",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_BORROW_OPENING_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_FLASHLOAN_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_MINIMUM_BORROW_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accrueInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowOpeningFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowTokenOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeBadDebtPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralTokenOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseBorrowLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleverage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseBorrowLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRateMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestRatePerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isRetired", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leverage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationPenaltyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mimimumBorrowAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repay(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repay(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "retire", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowOpeningFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowTokenOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowTokenOracleMaxPriceAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralTokenOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralTokenOracleMaxPriceAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRateMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationPenaltyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumBorrowAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrowAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBorrowShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCollateralShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPositionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral(address)",
    data: BytesLike
  ): Result;
}

export namespace BadDebtPositionClosedEvent {
  export type InputTuple = [
    liquidator: AddressLike,
    account: AddressLike,
    collateralSeized: BigNumberish,
    penaltyFee: BigNumberish,
    liquidationBonus: BigNumberish
  ];
  export type OutputTuple = [
    liquidator: string,
    account: string,
    collateralSeized: bigint,
    penaltyFee: bigint,
    liquidationBonus: bigint
  ];
  export interface OutputObject {
    liquidator: string;
    account: string;
    collateralSeized: bigint;
    penaltyFee: bigint;
    liquidationBonus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowLimitUpdatedEvent {
  export type InputTuple = [
    oldBorrowLimit: BigNumberish,
    newBorrowLimit: BigNumberish
  ];
  export type OutputTuple = [oldBorrowLimit: bigint, newBorrowLimit: bigint];
  export interface OutputObject {
    oldBorrowLimit: bigint;
    newBorrowLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowOpeningFeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowTokenOracleUpdatedEvent {
  export type InputTuple = [oldOracle: AddressLike, newOracle: AddressLike];
  export type OutputTuple = [oldOracle: string, newOracle: string];
  export interface OutputObject {
    oldOracle: string;
    newOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowedEvent {
  export type InputTuple = [
    borrower: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    share: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    to: string,
    amount: bigint,
    share: bigint
  ];
  export interface OutputObject {
    borrower: string;
    to: string;
    amount: bigint;
    share: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralDepositedEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    share: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    amount: bigint,
    share: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
    share: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralTokenOracleUpdatedEvent {
  export type InputTuple = [oldOracle: AddressLike, newOracle: AddressLike];
  export type OutputTuple = [oldOracle: string, newOracle: string];
  export interface OutputObject {
    oldOracle: string;
    newOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralWithdrawnEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    share: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    amount: bigint,
    share: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
    share: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeleveragedEvent {
  export type InputTuple = [
    borrower: AddressLike,
    withdrawalAmount: BigNumberish,
    repayAmount: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    withdrawalAmount: bigint,
    repayAmount: bigint
  ];
  export interface OutputObject {
    borrower: string;
    withdrawalAmount: bigint;
    repayAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InterestAccruedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InterestRateMultiplierUpdatedEvent {
  export type InputTuple = [
    oldMultiplier: BigNumberish,
    newMultiplier: BigNumberish
  ];
  export type OutputTuple = [oldMultiplier: bigint, newMultiplier: bigint];
  export interface OutputObject {
    oldMultiplier: bigint;
    newMultiplier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeveragedEvent {
  export type InputTuple = [
    borrower: AddressLike,
    depositamount: BigNumberish,
    borrowAmount: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    depositamount: bigint,
    borrowAmount: bigint
  ];
  export interface OutputObject {
    borrower: string;
    depositamount: bigint;
    borrowAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidatedEvent {
  export type InputTuple = [
    liquidator: AddressLike,
    borrower: AddressLike,
    collateralSeized: BigNumberish,
    penaltyFee: BigNumberish,
    borrowAmountReducedBy: BigNumberish
  ];
  export type OutputTuple = [
    liquidator: string,
    borrower: string,
    collateralSeized: bigint,
    penaltyFee: bigint,
    borrowAmountReducedBy: bigint
  ];
  export interface OutputObject {
    liquidator: string;
    borrower: string;
    collateralSeized: bigint;
    penaltyFee: bigint;
    borrowAmountReducedBy: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationPenaltyFeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationThresholdUpdatedEvent {
  export type InputTuple = [
    oldThreshold: BigNumberish,
    newThreshold: BigNumberish
  ];
  export type OutputTuple = [oldThreshold: bigint, newThreshold: bigint];
  export interface OutputObject {
    oldThreshold: bigint;
    newThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionClosedEvent {
  export type InputTuple = [
    account: AddressLike,
    collateralAmount: BigNumberish,
    borrowAmount: BigNumberish,
    collateralTokenPayout: BigNumberish,
    borrowTokenPayout: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    collateralAmount: bigint,
    borrowAmount: bigint,
    collateralTokenPayout: bigint,
    borrowTokenPayout: bigint
  ];
  export interface OutputObject {
    account: string;
    collateralAmount: bigint;
    borrowAmount: bigint;
    collateralTokenPayout: bigint;
    borrowTokenPayout: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepaidEvent {
  export type InputTuple = [
    borrower: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    share: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    to: string,
    amount: bigint,
    share: bigint
  ];
  export interface OutputObject {
    borrower: string;
    to: string;
    amount: bigint;
    share: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapEvent {
  export type InputTuple = [
    initiator: AddressLike,
    swapTarget: AddressLike,
    swapData: BytesLike,
    swapResult: BytesLike
  ];
  export type OutputTuple = [
    initiator: string,
    swapTarget: string,
    swapData: string,
    swapResult: string
  ];
  export interface OutputObject {
    initiator: string;
    swapTarget: string;
    swapData: string;
    swapResult: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultRetiredEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultRevivedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StackVault extends BaseContract {
  connect(runner?: ContractRunner | null): StackVault;
  waitForDeployment(): Promise<this>;

  interface: StackVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_BORROW_OPENING_FEE: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_FLASHLOAN_FEE: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_MINIMUM_BORROW_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  accrueInterest: TypedContractMethod<[], [void], "nonpayable">;

  borrow: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  borrowLimit: TypedContractMethod<[], [bigint], "view">;

  borrowOpeningFee: TypedContractMethod<[], [bigint], "view">;

  borrowToken: TypedContractMethod<[], [string], "view">;

  borrowTokenOracle: TypedContractMethod<[], [string], "view">;

  closeBadDebtPosition: TypedContractMethod<
    [account: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;

  closePosition: TypedContractMethod<
    [swapTarget: AddressLike, swapData: BytesLike],
    [
      [bigint, bigint] & {
        collateralTokenPayout: bigint;
        borrowTokenPayout: bigint;
      }
    ],
    "nonpayable"
  >;

  collateralToken: TypedContractMethod<[], [string], "view">;

  collateralTokenOracle: TypedContractMethod<[], [string], "view">;

  decreaseBorrowLimit: TypedContractMethod<
    [delta: BigNumberish],
    [void],
    "nonpayable"
  >;

  deleverage: TypedContractMethod<
    [
      withdrawalAmount: BigNumberish,
      swapTarget: AddressLike,
      swapData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  depositCollateral: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [bigint],
    "payable"
  >;

  increaseBorrowLimit: TypedContractMethod<
    [delta: BigNumberish],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [
      _owner: AddressLike,
      _collateralTokenOracle: AddressLike,
      _liquidationThreshold: BigNumberish,
      _interestRateMultiplier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  interestRateMultiplier: TypedContractMethod<[], [bigint], "view">;

  interestRatePerSecond: TypedContractMethod<[], [bigint], "view">;

  isRetired: TypedContractMethod<[], [boolean], "view">;

  leverage: TypedContractMethod<
    [
      depositAmount: BigNumberish,
      borrowAmount: BigNumberish,
      swapTarget: AddressLike,
      swapData: BytesLike
    ],
    [void],
    "payable"
  >;

  liquidate: TypedContractMethod<
    [account: AddressLike, repayAmount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  liquidationPenaltyFee: TypedContractMethod<[], [bigint], "view">;

  liquidationThreshold: TypedContractMethod<[], [bigint], "view">;

  mimimumBorrowAmount: TypedContractMethod<[], [bigint], "view">;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  onFlashLoan: TypedContractMethod<
    [
      initiator: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      fee: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "repay(address,uint256)": TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  "repay(address)": TypedContractMethod<
    [to: AddressLike],
    [bigint],
    "nonpayable"
  >;

  retire: TypedContractMethod<[], [void], "nonpayable">;

  revive: TypedContractMethod<[], [void], "nonpayable">;

  setBorrowOpeningFee: TypedContractMethod<
    [_borrowOpeningFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBorrowTokenOracle: TypedContractMethod<
    [newOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  setBorrowTokenOracleMaxPriceAge: TypedContractMethod<
    [maxAge: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCollateralTokenOracle: TypedContractMethod<
    [newOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  setCollateralTokenOracleMaxPriceAge: TypedContractMethod<
    [maxAge: BigNumberish],
    [void],
    "nonpayable"
  >;

  setInterestRateMultiplier: TypedContractMethod<
    [_interestRateMultiplier: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLiquidationPenaltyFee: TypedContractMethod<
    [_liquidationPenaltyFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLiquidationThreshold: TypedContractMethod<
    [newThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinimumBorrowAmount: TypedContractMethod<
    [_minimumBorrowAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalBorrowAmount: TypedContractMethod<[], [bigint], "view">;

  totalCollateralAmount: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  userBorrowShare: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  userCollateralShare: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  userPositionInfo: TypedContractMethod<
    [account: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        collateralAmount: bigint;
        collateralValue: bigint;
        borrowAmount: bigint;
        borrowValue: bigint;
      }
    ],
    "view"
  >;

  "withdrawCollateral(address,uint256)": TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  "withdrawCollateral(address)": TypedContractMethod<
    [to: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_BORROW_OPENING_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_FLASHLOAN_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_MINIMUM_BORROW_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accrueInterest"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrowLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowOpeningFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "borrowTokenOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "closeBadDebtPosition"
  ): TypedContractMethod<
    [account: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "closePosition"
  ): TypedContractMethod<
    [swapTarget: AddressLike, swapData: BytesLike],
    [
      [bigint, bigint] & {
        collateralTokenPayout: bigint;
        borrowTokenPayout: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collateralToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collateralTokenOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decreaseBorrowLimit"
  ): TypedContractMethod<[delta: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deleverage"
  ): TypedContractMethod<
    [
      withdrawalAmount: BigNumberish,
      swapTarget: AddressLike,
      swapData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositCollateral"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "increaseBorrowLimit"
  ): TypedContractMethod<[delta: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _collateralTokenOracle: AddressLike,
      _liquidationThreshold: BigNumberish,
      _interestRateMultiplier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "interestRateMultiplier"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "interestRatePerSecond"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isRetired"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "leverage"
  ): TypedContractMethod<
    [
      depositAmount: BigNumberish,
      borrowAmount: BigNumberish,
      swapTarget: AddressLike,
      swapData: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "liquidate"
  ): TypedContractMethod<
    [account: AddressLike, repayAmount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidationPenaltyFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "liquidationThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mimimumBorrowAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "onFlashLoan"
  ): TypedContractMethod<
    [
      initiator: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      fee: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repay(address,uint256)"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repay(address)"
  ): TypedContractMethod<[to: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "retire"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revive"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBorrowOpeningFee"
  ): TypedContractMethod<
    [_borrowOpeningFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBorrowTokenOracle"
  ): TypedContractMethod<[newOracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBorrowTokenOracleMaxPriceAge"
  ): TypedContractMethod<[maxAge: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCollateralTokenOracle"
  ): TypedContractMethod<[newOracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCollateralTokenOracleMaxPriceAge"
  ): TypedContractMethod<[maxAge: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setInterestRateMultiplier"
  ): TypedContractMethod<
    [_interestRateMultiplier: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLiquidationPenaltyFee"
  ): TypedContractMethod<
    [_liquidationPenaltyFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLiquidationThreshold"
  ): TypedContractMethod<[newThreshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinimumBorrowAmount"
  ): TypedContractMethod<
    [_minimumBorrowAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalBorrowAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalCollateralAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "userBorrowShare"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userCollateralShare"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userPositionInfo"
  ): TypedContractMethod<
    [account: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        collateralAmount: bigint;
        collateralValue: bigint;
        borrowAmount: bigint;
        borrowValue: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawCollateral(address,uint256)"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawCollateral(address)"
  ): TypedContractMethod<[to: AddressLike], [bigint], "nonpayable">;

  getEvent(
    key: "BadDebtPositionClosed"
  ): TypedContractEvent<
    BadDebtPositionClosedEvent.InputTuple,
    BadDebtPositionClosedEvent.OutputTuple,
    BadDebtPositionClosedEvent.OutputObject
  >;
  getEvent(
    key: "BorrowLimitUpdated"
  ): TypedContractEvent<
    BorrowLimitUpdatedEvent.InputTuple,
    BorrowLimitUpdatedEvent.OutputTuple,
    BorrowLimitUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BorrowOpeningFeeUpdated"
  ): TypedContractEvent<
    BorrowOpeningFeeUpdatedEvent.InputTuple,
    BorrowOpeningFeeUpdatedEvent.OutputTuple,
    BorrowOpeningFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BorrowTokenOracleUpdated"
  ): TypedContractEvent<
    BorrowTokenOracleUpdatedEvent.InputTuple,
    BorrowTokenOracleUpdatedEvent.OutputTuple,
    BorrowTokenOracleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Borrowed"
  ): TypedContractEvent<
    BorrowedEvent.InputTuple,
    BorrowedEvent.OutputTuple,
    BorrowedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralDeposited"
  ): TypedContractEvent<
    CollateralDepositedEvent.InputTuple,
    CollateralDepositedEvent.OutputTuple,
    CollateralDepositedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralTokenOracleUpdated"
  ): TypedContractEvent<
    CollateralTokenOracleUpdatedEvent.InputTuple,
    CollateralTokenOracleUpdatedEvent.OutputTuple,
    CollateralTokenOracleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralWithdrawn"
  ): TypedContractEvent<
    CollateralWithdrawnEvent.InputTuple,
    CollateralWithdrawnEvent.OutputTuple,
    CollateralWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Deleveraged"
  ): TypedContractEvent<
    DeleveragedEvent.InputTuple,
    DeleveragedEvent.OutputTuple,
    DeleveragedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "InterestAccrued"
  ): TypedContractEvent<
    InterestAccruedEvent.InputTuple,
    InterestAccruedEvent.OutputTuple,
    InterestAccruedEvent.OutputObject
  >;
  getEvent(
    key: "InterestRateMultiplierUpdated"
  ): TypedContractEvent<
    InterestRateMultiplierUpdatedEvent.InputTuple,
    InterestRateMultiplierUpdatedEvent.OutputTuple,
    InterestRateMultiplierUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Leveraged"
  ): TypedContractEvent<
    LeveragedEvent.InputTuple,
    LeveragedEvent.OutputTuple,
    LeveragedEvent.OutputObject
  >;
  getEvent(
    key: "Liquidated"
  ): TypedContractEvent<
    LiquidatedEvent.InputTuple,
    LiquidatedEvent.OutputTuple,
    LiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationPenaltyFeeUpdated"
  ): TypedContractEvent<
    LiquidationPenaltyFeeUpdatedEvent.InputTuple,
    LiquidationPenaltyFeeUpdatedEvent.OutputTuple,
    LiquidationPenaltyFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationThresholdUpdated"
  ): TypedContractEvent<
    LiquidationThresholdUpdatedEvent.InputTuple,
    LiquidationThresholdUpdatedEvent.OutputTuple,
    LiquidationThresholdUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PositionClosed"
  ): TypedContractEvent<
    PositionClosedEvent.InputTuple,
    PositionClosedEvent.OutputTuple,
    PositionClosedEvent.OutputObject
  >;
  getEvent(
    key: "Repaid"
  ): TypedContractEvent<
    RepaidEvent.InputTuple,
    RepaidEvent.OutputTuple,
    RepaidEvent.OutputObject
  >;
  getEvent(
    key: "Swap"
  ): TypedContractEvent<
    SwapEvent.InputTuple,
    SwapEvent.OutputTuple,
    SwapEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "VaultRetired"
  ): TypedContractEvent<
    VaultRetiredEvent.InputTuple,
    VaultRetiredEvent.OutputTuple,
    VaultRetiredEvent.OutputObject
  >;
  getEvent(
    key: "VaultRevived"
  ): TypedContractEvent<
    VaultRevivedEvent.InputTuple,
    VaultRevivedEvent.OutputTuple,
    VaultRevivedEvent.OutputObject
  >;

  filters: {
    "BadDebtPositionClosed(address,address,uint256,uint256,uint256)": TypedContractEvent<
      BadDebtPositionClosedEvent.InputTuple,
      BadDebtPositionClosedEvent.OutputTuple,
      BadDebtPositionClosedEvent.OutputObject
    >;
    BadDebtPositionClosed: TypedContractEvent<
      BadDebtPositionClosedEvent.InputTuple,
      BadDebtPositionClosedEvent.OutputTuple,
      BadDebtPositionClosedEvent.OutputObject
    >;

    "BorrowLimitUpdated(uint256,uint256)": TypedContractEvent<
      BorrowLimitUpdatedEvent.InputTuple,
      BorrowLimitUpdatedEvent.OutputTuple,
      BorrowLimitUpdatedEvent.OutputObject
    >;
    BorrowLimitUpdated: TypedContractEvent<
      BorrowLimitUpdatedEvent.InputTuple,
      BorrowLimitUpdatedEvent.OutputTuple,
      BorrowLimitUpdatedEvent.OutputObject
    >;

    "BorrowOpeningFeeUpdated(uint256,uint256)": TypedContractEvent<
      BorrowOpeningFeeUpdatedEvent.InputTuple,
      BorrowOpeningFeeUpdatedEvent.OutputTuple,
      BorrowOpeningFeeUpdatedEvent.OutputObject
    >;
    BorrowOpeningFeeUpdated: TypedContractEvent<
      BorrowOpeningFeeUpdatedEvent.InputTuple,
      BorrowOpeningFeeUpdatedEvent.OutputTuple,
      BorrowOpeningFeeUpdatedEvent.OutputObject
    >;

    "BorrowTokenOracleUpdated(address,address)": TypedContractEvent<
      BorrowTokenOracleUpdatedEvent.InputTuple,
      BorrowTokenOracleUpdatedEvent.OutputTuple,
      BorrowTokenOracleUpdatedEvent.OutputObject
    >;
    BorrowTokenOracleUpdated: TypedContractEvent<
      BorrowTokenOracleUpdatedEvent.InputTuple,
      BorrowTokenOracleUpdatedEvent.OutputTuple,
      BorrowTokenOracleUpdatedEvent.OutputObject
    >;

    "Borrowed(address,address,uint256,uint256)": TypedContractEvent<
      BorrowedEvent.InputTuple,
      BorrowedEvent.OutputTuple,
      BorrowedEvent.OutputObject
    >;
    Borrowed: TypedContractEvent<
      BorrowedEvent.InputTuple,
      BorrowedEvent.OutputTuple,
      BorrowedEvent.OutputObject
    >;

    "CollateralDeposited(address,address,uint256,uint256)": TypedContractEvent<
      CollateralDepositedEvent.InputTuple,
      CollateralDepositedEvent.OutputTuple,
      CollateralDepositedEvent.OutputObject
    >;
    CollateralDeposited: TypedContractEvent<
      CollateralDepositedEvent.InputTuple,
      CollateralDepositedEvent.OutputTuple,
      CollateralDepositedEvent.OutputObject
    >;

    "CollateralTokenOracleUpdated(address,address)": TypedContractEvent<
      CollateralTokenOracleUpdatedEvent.InputTuple,
      CollateralTokenOracleUpdatedEvent.OutputTuple,
      CollateralTokenOracleUpdatedEvent.OutputObject
    >;
    CollateralTokenOracleUpdated: TypedContractEvent<
      CollateralTokenOracleUpdatedEvent.InputTuple,
      CollateralTokenOracleUpdatedEvent.OutputTuple,
      CollateralTokenOracleUpdatedEvent.OutputObject
    >;

    "CollateralWithdrawn(address,address,uint256,uint256)": TypedContractEvent<
      CollateralWithdrawnEvent.InputTuple,
      CollateralWithdrawnEvent.OutputTuple,
      CollateralWithdrawnEvent.OutputObject
    >;
    CollateralWithdrawn: TypedContractEvent<
      CollateralWithdrawnEvent.InputTuple,
      CollateralWithdrawnEvent.OutputTuple,
      CollateralWithdrawnEvent.OutputObject
    >;

    "Deleveraged(address,uint256,uint256)": TypedContractEvent<
      DeleveragedEvent.InputTuple,
      DeleveragedEvent.OutputTuple,
      DeleveragedEvent.OutputObject
    >;
    Deleveraged: TypedContractEvent<
      DeleveragedEvent.InputTuple,
      DeleveragedEvent.OutputTuple,
      DeleveragedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "InterestAccrued(uint256)": TypedContractEvent<
      InterestAccruedEvent.InputTuple,
      InterestAccruedEvent.OutputTuple,
      InterestAccruedEvent.OutputObject
    >;
    InterestAccrued: TypedContractEvent<
      InterestAccruedEvent.InputTuple,
      InterestAccruedEvent.OutputTuple,
      InterestAccruedEvent.OutputObject
    >;

    "InterestRateMultiplierUpdated(uint256,uint256)": TypedContractEvent<
      InterestRateMultiplierUpdatedEvent.InputTuple,
      InterestRateMultiplierUpdatedEvent.OutputTuple,
      InterestRateMultiplierUpdatedEvent.OutputObject
    >;
    InterestRateMultiplierUpdated: TypedContractEvent<
      InterestRateMultiplierUpdatedEvent.InputTuple,
      InterestRateMultiplierUpdatedEvent.OutputTuple,
      InterestRateMultiplierUpdatedEvent.OutputObject
    >;

    "Leveraged(address,uint256,uint256)": TypedContractEvent<
      LeveragedEvent.InputTuple,
      LeveragedEvent.OutputTuple,
      LeveragedEvent.OutputObject
    >;
    Leveraged: TypedContractEvent<
      LeveragedEvent.InputTuple,
      LeveragedEvent.OutputTuple,
      LeveragedEvent.OutputObject
    >;

    "Liquidated(address,address,uint256,uint256,uint256)": TypedContractEvent<
      LiquidatedEvent.InputTuple,
      LiquidatedEvent.OutputTuple,
      LiquidatedEvent.OutputObject
    >;
    Liquidated: TypedContractEvent<
      LiquidatedEvent.InputTuple,
      LiquidatedEvent.OutputTuple,
      LiquidatedEvent.OutputObject
    >;

    "LiquidationPenaltyFeeUpdated(uint256,uint256)": TypedContractEvent<
      LiquidationPenaltyFeeUpdatedEvent.InputTuple,
      LiquidationPenaltyFeeUpdatedEvent.OutputTuple,
      LiquidationPenaltyFeeUpdatedEvent.OutputObject
    >;
    LiquidationPenaltyFeeUpdated: TypedContractEvent<
      LiquidationPenaltyFeeUpdatedEvent.InputTuple,
      LiquidationPenaltyFeeUpdatedEvent.OutputTuple,
      LiquidationPenaltyFeeUpdatedEvent.OutputObject
    >;

    "LiquidationThresholdUpdated(uint8,uint8)": TypedContractEvent<
      LiquidationThresholdUpdatedEvent.InputTuple,
      LiquidationThresholdUpdatedEvent.OutputTuple,
      LiquidationThresholdUpdatedEvent.OutputObject
    >;
    LiquidationThresholdUpdated: TypedContractEvent<
      LiquidationThresholdUpdatedEvent.InputTuple,
      LiquidationThresholdUpdatedEvent.OutputTuple,
      LiquidationThresholdUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PositionClosed(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      PositionClosedEvent.InputTuple,
      PositionClosedEvent.OutputTuple,
      PositionClosedEvent.OutputObject
    >;
    PositionClosed: TypedContractEvent<
      PositionClosedEvent.InputTuple,
      PositionClosedEvent.OutputTuple,
      PositionClosedEvent.OutputObject
    >;

    "Repaid(address,address,uint256,uint256)": TypedContractEvent<
      RepaidEvent.InputTuple,
      RepaidEvent.OutputTuple,
      RepaidEvent.OutputObject
    >;
    Repaid: TypedContractEvent<
      RepaidEvent.InputTuple,
      RepaidEvent.OutputTuple,
      RepaidEvent.OutputObject
    >;

    "Swap(address,address,bytes,bytes)": TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;
    Swap: TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "VaultRetired()": TypedContractEvent<
      VaultRetiredEvent.InputTuple,
      VaultRetiredEvent.OutputTuple,
      VaultRetiredEvent.OutputObject
    >;
    VaultRetired: TypedContractEvent<
      VaultRetiredEvent.InputTuple,
      VaultRetiredEvent.OutputTuple,
      VaultRetiredEvent.OutputObject
    >;

    "VaultRevived()": TypedContractEvent<
      VaultRevivedEvent.InputTuple,
      VaultRevivedEvent.OutputTuple,
      VaultRevivedEvent.OutputObject
    >;
    VaultRevived: TypedContractEvent<
      VaultRevivedEvent.InputTuple,
      VaultRevivedEvent.OutputTuple,
      VaultRevivedEvent.OutputObject
    >;
  };
}
