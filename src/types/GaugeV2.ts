/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common.js";

export declare namespace GaugeV2CL {
  export type ManagerInfoStruct = {
    manager: AddressLike;
    tvl: BigNumberish;
    rewards: BigNumberish;
  };

  export type ManagerInfoStructOutput = [
    manager: string,
    tvl: bigint,
    rewards: bigint
  ] & { manager: string; tvl: bigint; rewards: bigint };
}

export interface GaugeV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_FEE"
      | "ONE_HUNDRED_FEE"
      | "PRECISION"
      | "TOKEN"
      | "VE"
      | "WETH9"
      | "ackReward"
      | "activateEmergencyMode"
      | "addAlmManager"
      | "almManagers"
      | "balanceOf"
      | "box"
      | "bridgeReward"
      | "calculateTVL"
      | "claimFees"
      | "claimManagementFees"
      | "collectALMReward"
      | "collectReward"
      | "crossTo"
      | "deposit"
      | "distribution"
      | "earnedFees"
      | "earnedManagentFees"
      | "earnedReward"
      | "emergency"
      | "emergencyWithdraw"
      | "emergencyWithdrawAmount"
      | "external_bribe"
      | "fee"
      | "gaugeFactory"
      | "gaugeRewarder"
      | "getALMRewards"
      | "getAlmManagers"
      | "getPrice"
      | "getStakedAmounts"
      | "initialize"
      | "internal_bribe"
      | "isForPair"
      | "isMainChain"
      | "isPoolChain"
      | "lBoxManager"
      | "lastTimeRewardApplicable"
      | "lzMainChainId"
      | "lzPoolChainId"
      | "managementFees"
      | "nonce"
      | "notifyCredit"
      | "notifyRewardAmount"
      | "owner"
      | "pendingReward"
      | "periodFinish"
      | "pool"
      | "protocolFeesManager"
      | "pullGaugeLiquidity"
      | "rebalanceGaugeLiquidity"
      | "removeAlmManager"
      | "renounceOwnership"
      | "rescueToken"
      | "rewardCredited"
      | "rewardForDuration"
      | "rewardPerToken"
      | "rewardPerTokenStored"
      | "rewardToken"
      | "rewards"
      | "rewardsInfo"
      | "setDistribution"
      | "setFee"
      | "setGaugeRewarder"
      | "setInternalBribe"
      | "setProtocolFeesManager"
      | "stopEmergencyMode"
      | "totalSupply"
      | "transferOwnership"
      | "userRewardPerTokenPaid"
      | "withdraw"
      | "withdrawAllAndHarvest"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimFees"
      | "ClaimManagementFees"
      | "Deposit"
      | "DistributionChanged"
      | "EmergencyActivated"
      | "EmergencyDeactivated"
      | "FeeChanged"
      | "GaugeRewarderChanged"
      | "Harvest"
      | "Initialized"
      | "OwnershipTransferred"
      | "ProtocolFeesManagerChanged"
      | "Rescue"
      | "RewardAdded"
      | "RewardBridged"
      | "RewardCredited"
      | "UpdateAlmManager"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ONE_HUNDRED_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(functionFragment: "TOKEN", values?: undefined): string;
  encodeFunctionData(functionFragment: "VE", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ackReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activateEmergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAlmManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "almManagers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "box", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bridgeReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTVL",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claimFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimManagementFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectALMReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "crossTo",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earnedFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earnedManagentFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earnedReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "emergency", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "external_bribe",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gaugeFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gaugeRewarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getALMRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAlmManagers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStakedAmounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      boolean,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "internal_bribe",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isForPair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isMainChain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolChain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lBoxManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lzMainChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lzPoolChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managementFees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "notifyCredit",
    values: [BigNumberish, AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "periodFinish",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolFeesManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pullGaugeLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceGaugeLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAlmManager",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueToken",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardCredited",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardForDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerTokenStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDistribution",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGaugeRewarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setInternalBribe",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeesManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stopEmergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardPerTokenPaid",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllAndHarvest",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ONE_HUNDRED_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ackReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activateEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAlmManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "almManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "box", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bridgeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTVL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimManagementFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectALMReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crossTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earnedFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "earnedManagentFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earnedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "emergency", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "external_bribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gaugeFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gaugeRewarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getALMRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAlmManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStakedAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "internal_bribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isForPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMainChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPoolChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lBoxManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lzMainChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lzPoolChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managementFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeesManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pullGaugeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceGaugeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAlmManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardCredited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardForDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerTokenStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGaugeRewarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInternalBribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeesManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewardPerTokenPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllAndHarvest",
    data: BytesLike
  ): Result;
}

export namespace ClaimFeesEvent {
  export type InputTuple = [
    from: AddressLike,
    claimed0: BigNumberish,
    claimed1: BigNumberish
  ];
  export type OutputTuple = [from: string, claimed0: bigint, claimed1: bigint];
  export interface OutputObject {
    from: string;
    claimed0: bigint;
    claimed1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimManagementFeesEvent {
  export type InputTuple = [
    owner: AddressLike,
    to: AddressLike,
    protocolFees: BigNumberish
  ];
  export type OutputTuple = [owner: string, to: string, protocolFees: bigint];
  export interface OutputObject {
    owner: string;
    to: string;
    protocolFees: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributionChangedEvent {
  export type InputTuple = [distribution: AddressLike];
  export type OutputTuple = [distribution: string];
  export interface OutputObject {
    distribution: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyActivatedEvent {
  export type InputTuple = [gauge: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [gauge: string, timestamp: bigint];
  export interface OutputObject {
    gauge: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyDeactivatedEvent {
  export type InputTuple = [gauge: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [gauge: string, timestamp: bigint];
  export interface OutputObject {
    gauge: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeChangedEvent {
  export type InputTuple = [fee: BigNumberish];
  export type OutputTuple = [fee: bigint];
  export interface OutputObject {
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GaugeRewarderChangedEvent {
  export type InputTuple = [gaugeRewarder: AddressLike];
  export type OutputTuple = [gaugeRewarder: string];
  export interface OutputObject {
    gaugeRewarder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HarvestEvent {
  export type InputTuple = [
    user: AddressLike,
    recipient: AddressLike,
    reward: BigNumberish
  ];
  export type OutputTuple = [user: string, recipient: string, reward: bigint];
  export interface OutputObject {
    user: string;
    recipient: string;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolFeesManagerChangedEvent {
  export type InputTuple = [manager: AddressLike];
  export type OutputTuple = [manager: string];
  export interface OutputObject {
    manager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RescueEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardAddedEvent {
  export type InputTuple = [reward: BigNumberish, residueAmount: BigNumberish];
  export type OutputTuple = [reward: bigint, residueAmount: bigint];
  export interface OutputObject {
    reward: bigint;
    residueAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardBridgedEvent {
  export type InputTuple = [gauge: AddressLike, reward: BigNumberish];
  export type OutputTuple = [gauge: string, reward: bigint];
  export interface OutputObject {
    gauge: string;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardCreditedEvent {
  export type InputTuple = [nonceId: BigNumberish, reward: BigNumberish];
  export type OutputTuple = [nonceId: bigint, reward: bigint];
  export interface OutputObject {
    nonceId: bigint;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateAlmManagerEvent {
  export type InputTuple = [manager: AddressLike, isAdded: boolean];
  export type OutputTuple = [manager: string, isAdded: boolean];
  export interface OutputObject {
    manager: string;
    isAdded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GaugeV2 extends BaseContract {
  connect(runner?: ContractRunner | null): GaugeV2;
  waitForDeployment(): Promise<this>;

  interface: GaugeV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_FEE: TypedContractMethod<[], [bigint], "view">;

  ONE_HUNDRED_FEE: TypedContractMethod<[], [bigint], "view">;

  PRECISION: TypedContractMethod<[], [bigint], "view">;

  TOKEN: TypedContractMethod<[], [string], "view">;

  VE: TypedContractMethod<[], [string], "view">;

  WETH9: TypedContractMethod<[], [string], "view">;

  ackReward: TypedContractMethod<[_nonce: BigNumberish], [void], "nonpayable">;

  activateEmergencyMode: TypedContractMethod<[], [void], "nonpayable">;

  addAlmManager: TypedContractMethod<
    [_manager: AddressLike],
    [void],
    "nonpayable"
  >;

  almManagers: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint] & {
        manager: string;
        tvl: bigint;
        rewards: bigint;
      }
    ],
    "view"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  box: TypedContractMethod<[], [string], "view">;

  bridgeReward: TypedContractMethod<[], [void], "payable">;

  calculateTVL: TypedContractMethod<
    [],
    [[bigint[], bigint] & { tvls: bigint[]; total: bigint }],
    "view"
  >;

  claimFees: TypedContractMethod<
    [],
    [[bigint, bigint] & { claimed0: bigint; claimed1: bigint }],
    "nonpayable"
  >;

  claimManagementFees: TypedContractMethod<
    [to: AddressLike],
    [bigint],
    "nonpayable"
  >;

  collectALMReward: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  collectReward: TypedContractMethod<[], [void], "nonpayable">;

  crossTo: TypedContractMethod<
    [arg0: BigNumberish, arg1: boolean],
    [boolean],
    "nonpayable"
  >;

  deposit: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  distribution: TypedContractMethod<[], [string], "view">;

  earnedFees: TypedContractMethod<
    [],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "view"
  >;

  earnedManagentFees: TypedContractMethod<[], [bigint], "view">;

  earnedReward: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  emergency: TypedContractMethod<[], [boolean], "view">;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  emergencyWithdrawAmount: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  external_bribe: TypedContractMethod<[], [string], "view">;

  fee: TypedContractMethod<[], [bigint], "view">;

  gaugeFactory: TypedContractMethod<[], [string], "view">;

  gaugeRewarder: TypedContractMethod<[], [string], "view">;

  getALMRewards: TypedContractMethod<[alm: AddressLike], [bigint], "view">;

  getAlmManagers: TypedContractMethod<
    [],
    [GaugeV2CL.ManagerInfoStructOutput[]],
    "view"
  >;

  getPrice: TypedContractMethod<[], [bigint], "view">;

  getStakedAmounts: TypedContractMethod<
    [account: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _isMainChain: boolean,
      _lzMainChainId: BigNumberish,
      _lzPoolChainId: BigNumberish,
      _pool: AddressLike,
      _rewardToken: AddressLike,
      _distribution: AddressLike,
      _internal_bribe: AddressLike,
      _weth9: AddressLike,
      _alm_box: AddressLike,
      _lBox_manager: AddressLike,
      _fee_manager: AddressLike,
      _isForPair: boolean
    ],
    [void],
    "nonpayable"
  >;

  internal_bribe: TypedContractMethod<[], [string], "view">;

  isForPair: TypedContractMethod<[], [boolean], "view">;

  isMainChain: TypedContractMethod<[], [boolean], "view">;

  isPoolChain: TypedContractMethod<[], [boolean], "view">;

  lBoxManager: TypedContractMethod<[], [string], "view">;

  lastTimeRewardApplicable: TypedContractMethod<[], [bigint], "view">;

  lzMainChainId: TypedContractMethod<[], [bigint], "view">;

  lzPoolChainId: TypedContractMethod<[], [bigint], "view">;

  managementFees: TypedContractMethod<[], [bigint], "view">;

  nonce: TypedContractMethod<[], [bigint], "view">;

  notifyCredit: TypedContractMethod<
    [
      srcChainId: BigNumberish,
      initiator: AddressLike,
      arg2: AddressLike,
      token: AddressLike,
      reward: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  notifyRewardAmount: TypedContractMethod<
    [token: AddressLike, reward: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingReward: TypedContractMethod<[], [bigint], "view">;

  periodFinish: TypedContractMethod<[], [bigint], "view">;

  pool: TypedContractMethod<[], [string], "view">;

  protocolFeesManager: TypedContractMethod<[], [string], "view">;

  pullGaugeLiquidity: TypedContractMethod<[], [void], "nonpayable">;

  rebalanceGaugeLiquidity: TypedContractMethod<
    [
      newtickLower: BigNumberish,
      newtickUpper: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  removeAlmManager: TypedContractMethod<
    [index: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rescueToken: TypedContractMethod<
    [_amount: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  rewardCredited: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  rewardForDuration: TypedContractMethod<[], [bigint], "view">;

  rewardPerToken: TypedContractMethod<[], [bigint], "view">;

  rewardPerTokenStored: TypedContractMethod<[], [bigint], "view">;

  rewardToken: TypedContractMethod<[], [string], "view">;

  rewards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  rewardsInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        amount: bigint;
        disbursed: bigint;
        rewardRate: bigint;
        residueAmount: bigint;
        liquidity0rewards: bigint;
        periodFinish: bigint;
        lastUpdateTime: bigint;
      }
    ],
    "view"
  >;

  setDistribution: TypedContractMethod<
    [distro: AddressLike],
    [void],
    "nonpayable"
  >;

  setFee: TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;

  setGaugeRewarder: TypedContractMethod<
    [_gaugeRewarder: AddressLike],
    [void],
    "nonpayable"
  >;

  setInternalBribe: TypedContractMethod<
    [_int: AddressLike],
    [void],
    "nonpayable"
  >;

  setProtocolFeesManager: TypedContractMethod<
    [manager: AddressLike],
    [void],
    "nonpayable"
  >;

  stopEmergencyMode: TypedContractMethod<[], [void], "nonpayable">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userRewardPerTokenPaid: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  withdraw: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  withdrawAllAndHarvest: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ONE_HUNDRED_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "VE"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WETH9"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ackReward"
  ): TypedContractMethod<[_nonce: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "activateEmergencyMode"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addAlmManager"
  ): TypedContractMethod<[_manager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "almManagers"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint] & {
        manager: string;
        tvl: bigint;
        rewards: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "box"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bridgeReward"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "calculateTVL"
  ): TypedContractMethod<
    [],
    [[bigint[], bigint] & { tvls: bigint[]; total: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimFees"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { claimed0: bigint; claimed1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimManagementFees"
  ): TypedContractMethod<[to: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "collectALMReward"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collectReward"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "crossTo"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: boolean],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distribution"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "earnedFees"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "earnedManagentFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "earnedReward"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergency"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdrawAmount"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "external_bribe"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gaugeFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gaugeRewarder"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getALMRewards"
  ): TypedContractMethod<[alm: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAlmManagers"
  ): TypedContractMethod<[], [GaugeV2CL.ManagerInfoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStakedAmounts"
  ): TypedContractMethod<
    [account: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _isMainChain: boolean,
      _lzMainChainId: BigNumberish,
      _lzPoolChainId: BigNumberish,
      _pool: AddressLike,
      _rewardToken: AddressLike,
      _distribution: AddressLike,
      _internal_bribe: AddressLike,
      _weth9: AddressLike,
      _alm_box: AddressLike,
      _lBox_manager: AddressLike,
      _fee_manager: AddressLike,
      _isForPair: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "internal_bribe"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isForPair"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isMainChain"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPoolChain"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lBoxManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lastTimeRewardApplicable"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lzMainChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lzPoolChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "managementFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "notifyCredit"
  ): TypedContractMethod<
    [
      srcChainId: BigNumberish,
      initiator: AddressLike,
      arg2: AddressLike,
      token: AddressLike,
      reward: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "notifyRewardAmount"
  ): TypedContractMethod<
    [token: AddressLike, reward: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingReward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "periodFinish"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolFeesManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pullGaugeLiquidity"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rebalanceGaugeLiquidity"
  ): TypedContractMethod<
    [
      newtickLower: BigNumberish,
      newtickUpper: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAlmManager"
  ): TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rescueToken"
  ): TypedContractMethod<
    [_amount: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardCredited"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardForDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardPerToken"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardPerTokenStored"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rewards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardsInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        amount: bigint;
        disbursed: bigint;
        rewardRate: bigint;
        residueAmount: bigint;
        liquidity0rewards: bigint;
        periodFinish: bigint;
        lastUpdateTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setDistribution"
  ): TypedContractMethod<[distro: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGaugeRewarder"
  ): TypedContractMethod<[_gaugeRewarder: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setInternalBribe"
  ): TypedContractMethod<[_int: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolFeesManager"
  ): TypedContractMethod<[manager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stopEmergencyMode"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userRewardPerTokenPaid"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawAllAndHarvest"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ClaimFees"
  ): TypedContractEvent<
    ClaimFeesEvent.InputTuple,
    ClaimFeesEvent.OutputTuple,
    ClaimFeesEvent.OutputObject
  >;
  getEvent(
    key: "ClaimManagementFees"
  ): TypedContractEvent<
    ClaimManagementFeesEvent.InputTuple,
    ClaimManagementFeesEvent.OutputTuple,
    ClaimManagementFeesEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "DistributionChanged"
  ): TypedContractEvent<
    DistributionChangedEvent.InputTuple,
    DistributionChangedEvent.OutputTuple,
    DistributionChangedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyActivated"
  ): TypedContractEvent<
    EmergencyActivatedEvent.InputTuple,
    EmergencyActivatedEvent.OutputTuple,
    EmergencyActivatedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyDeactivated"
  ): TypedContractEvent<
    EmergencyDeactivatedEvent.InputTuple,
    EmergencyDeactivatedEvent.OutputTuple,
    EmergencyDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "FeeChanged"
  ): TypedContractEvent<
    FeeChangedEvent.InputTuple,
    FeeChangedEvent.OutputTuple,
    FeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "GaugeRewarderChanged"
  ): TypedContractEvent<
    GaugeRewarderChangedEvent.InputTuple,
    GaugeRewarderChangedEvent.OutputTuple,
    GaugeRewarderChangedEvent.OutputObject
  >;
  getEvent(
    key: "Harvest"
  ): TypedContractEvent<
    HarvestEvent.InputTuple,
    HarvestEvent.OutputTuple,
    HarvestEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolFeesManagerChanged"
  ): TypedContractEvent<
    ProtocolFeesManagerChangedEvent.InputTuple,
    ProtocolFeesManagerChangedEvent.OutputTuple,
    ProtocolFeesManagerChangedEvent.OutputObject
  >;
  getEvent(
    key: "Rescue"
  ): TypedContractEvent<
    RescueEvent.InputTuple,
    RescueEvent.OutputTuple,
    RescueEvent.OutputObject
  >;
  getEvent(
    key: "RewardAdded"
  ): TypedContractEvent<
    RewardAddedEvent.InputTuple,
    RewardAddedEvent.OutputTuple,
    RewardAddedEvent.OutputObject
  >;
  getEvent(
    key: "RewardBridged"
  ): TypedContractEvent<
    RewardBridgedEvent.InputTuple,
    RewardBridgedEvent.OutputTuple,
    RewardBridgedEvent.OutputObject
  >;
  getEvent(
    key: "RewardCredited"
  ): TypedContractEvent<
    RewardCreditedEvent.InputTuple,
    RewardCreditedEvent.OutputTuple,
    RewardCreditedEvent.OutputObject
  >;
  getEvent(
    key: "UpdateAlmManager"
  ): TypedContractEvent<
    UpdateAlmManagerEvent.InputTuple,
    UpdateAlmManagerEvent.OutputTuple,
    UpdateAlmManagerEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "ClaimFees(address,uint256,uint256)": TypedContractEvent<
      ClaimFeesEvent.InputTuple,
      ClaimFeesEvent.OutputTuple,
      ClaimFeesEvent.OutputObject
    >;
    ClaimFees: TypedContractEvent<
      ClaimFeesEvent.InputTuple,
      ClaimFeesEvent.OutputTuple,
      ClaimFeesEvent.OutputObject
    >;

    "ClaimManagementFees(address,address,uint256)": TypedContractEvent<
      ClaimManagementFeesEvent.InputTuple,
      ClaimManagementFeesEvent.OutputTuple,
      ClaimManagementFeesEvent.OutputObject
    >;
    ClaimManagementFees: TypedContractEvent<
      ClaimManagementFeesEvent.InputTuple,
      ClaimManagementFeesEvent.OutputTuple,
      ClaimManagementFeesEvent.OutputObject
    >;

    "Deposit(address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "DistributionChanged(address)": TypedContractEvent<
      DistributionChangedEvent.InputTuple,
      DistributionChangedEvent.OutputTuple,
      DistributionChangedEvent.OutputObject
    >;
    DistributionChanged: TypedContractEvent<
      DistributionChangedEvent.InputTuple,
      DistributionChangedEvent.OutputTuple,
      DistributionChangedEvent.OutputObject
    >;

    "EmergencyActivated(address,uint256)": TypedContractEvent<
      EmergencyActivatedEvent.InputTuple,
      EmergencyActivatedEvent.OutputTuple,
      EmergencyActivatedEvent.OutputObject
    >;
    EmergencyActivated: TypedContractEvent<
      EmergencyActivatedEvent.InputTuple,
      EmergencyActivatedEvent.OutputTuple,
      EmergencyActivatedEvent.OutputObject
    >;

    "EmergencyDeactivated(address,uint256)": TypedContractEvent<
      EmergencyDeactivatedEvent.InputTuple,
      EmergencyDeactivatedEvent.OutputTuple,
      EmergencyDeactivatedEvent.OutputObject
    >;
    EmergencyDeactivated: TypedContractEvent<
      EmergencyDeactivatedEvent.InputTuple,
      EmergencyDeactivatedEvent.OutputTuple,
      EmergencyDeactivatedEvent.OutputObject
    >;

    "FeeChanged(uint24)": TypedContractEvent<
      FeeChangedEvent.InputTuple,
      FeeChangedEvent.OutputTuple,
      FeeChangedEvent.OutputObject
    >;
    FeeChanged: TypedContractEvent<
      FeeChangedEvent.InputTuple,
      FeeChangedEvent.OutputTuple,
      FeeChangedEvent.OutputObject
    >;

    "GaugeRewarderChanged(address)": TypedContractEvent<
      GaugeRewarderChangedEvent.InputTuple,
      GaugeRewarderChangedEvent.OutputTuple,
      GaugeRewarderChangedEvent.OutputObject
    >;
    GaugeRewarderChanged: TypedContractEvent<
      GaugeRewarderChangedEvent.InputTuple,
      GaugeRewarderChangedEvent.OutputTuple,
      GaugeRewarderChangedEvent.OutputObject
    >;

    "Harvest(address,address,uint256)": TypedContractEvent<
      HarvestEvent.InputTuple,
      HarvestEvent.OutputTuple,
      HarvestEvent.OutputObject
    >;
    Harvest: TypedContractEvent<
      HarvestEvent.InputTuple,
      HarvestEvent.OutputTuple,
      HarvestEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProtocolFeesManagerChanged(address)": TypedContractEvent<
      ProtocolFeesManagerChangedEvent.InputTuple,
      ProtocolFeesManagerChangedEvent.OutputTuple,
      ProtocolFeesManagerChangedEvent.OutputObject
    >;
    ProtocolFeesManagerChanged: TypedContractEvent<
      ProtocolFeesManagerChangedEvent.InputTuple,
      ProtocolFeesManagerChangedEvent.OutputTuple,
      ProtocolFeesManagerChangedEvent.OutputObject
    >;

    "Rescue(address,uint256)": TypedContractEvent<
      RescueEvent.InputTuple,
      RescueEvent.OutputTuple,
      RescueEvent.OutputObject
    >;
    Rescue: TypedContractEvent<
      RescueEvent.InputTuple,
      RescueEvent.OutputTuple,
      RescueEvent.OutputObject
    >;

    "RewardAdded(uint256,uint256)": TypedContractEvent<
      RewardAddedEvent.InputTuple,
      RewardAddedEvent.OutputTuple,
      RewardAddedEvent.OutputObject
    >;
    RewardAdded: TypedContractEvent<
      RewardAddedEvent.InputTuple,
      RewardAddedEvent.OutputTuple,
      RewardAddedEvent.OutputObject
    >;

    "RewardBridged(address,uint256)": TypedContractEvent<
      RewardBridgedEvent.InputTuple,
      RewardBridgedEvent.OutputTuple,
      RewardBridgedEvent.OutputObject
    >;
    RewardBridged: TypedContractEvent<
      RewardBridgedEvent.InputTuple,
      RewardBridgedEvent.OutputTuple,
      RewardBridgedEvent.OutputObject
    >;

    "RewardCredited(uint64,uint256)": TypedContractEvent<
      RewardCreditedEvent.InputTuple,
      RewardCreditedEvent.OutputTuple,
      RewardCreditedEvent.OutputObject
    >;
    RewardCredited: TypedContractEvent<
      RewardCreditedEvent.InputTuple,
      RewardCreditedEvent.OutputTuple,
      RewardCreditedEvent.OutputObject
    >;

    "UpdateAlmManager(address,bool)": TypedContractEvent<
      UpdateAlmManagerEvent.InputTuple,
      UpdateAlmManagerEvent.OutputTuple,
      UpdateAlmManagerEvent.OutputObject
    >;
    UpdateAlmManager: TypedContractEvent<
      UpdateAlmManagerEvent.InputTuple,
      UpdateAlmManagerEvent.OutputTuple,
      UpdateAlmManagerEvent.OutputObject
    >;

    "Withdraw(address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
