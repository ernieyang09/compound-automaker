/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common.js";

export interface Erc20Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_PAYLOAD_SIZE_LIMIT"
      | "NO_EXTRA_GAS"
      | "PT_SEND"
      | "UPGRADE_INTERFACE_VERSION"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "burnFrom"
      | "circulatingSupply"
      | "decimals"
      | "estimateSendFee"
      | "failedMessages"
      | "flashFee"
      | "flashLoan"
      | "forceResumeReceive"
      | "getConfig"
      | "getTrustedRemoteAddress"
      | "initialize"
      | "isTrustedRemote"
      | "lzEndpoint"
      | "lzReceive"
      | "maxFlashLoan"
      | "minDstGasLookup"
      | "mint"
      | "minter"
      | "name"
      | "nonblockingLzReceive"
      | "owner"
      | "payloadSizeLimitLookup"
      | "precrime"
      | "proxiableUUID"
      | "renounceOwnership"
      | "retryMessage"
      | "sendFrom"
      | "setConfig"
      | "setMinDstGas"
      | "setMinter"
      | "setPayloadSizeLimit"
      | "setPrecrime"
      | "setReceiveVersion"
      | "setSendVersion"
      | "setTrustedRemote"
      | "setTrustedRemoteAddress"
      | "setUseCustomAdapterParams"
      | "supportsInterface"
      | "symbol"
      | "token"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "trustedRemoteLookup"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "Initialized"
      | "MessageFailed"
      | "OwnershipTransferred"
      | "ReceiveFromChain"
      | "RetryMessageSuccess"
      | "SendToChain"
      | "SetMinDstGas"
      | "SetPrecrime"
      | "SetTrustedRemote"
      | "SetTrustedRemoteAddress"
      | "SetUseCustomAdapterParams"
      | "Transfer"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_PAYLOAD_SIZE_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NO_EXTRA_GAS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PT_SEND", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "circulatingSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "estimateSendFee",
    values: [BigNumberish, BytesLike, BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "failedMessages",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flashFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forceResumeReceive",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfig",
    values: [BigNumberish, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedRemoteAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedRemote",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lzEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceive",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxFlashLoan",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minDstGasLookup",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonblockingLzReceive",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payloadSizeLimitLookup",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "precrime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retryMessage",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendFrom",
    values: [
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinDstGas",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPayloadSizeLimit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrecrime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReceiveVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSendVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedRemote",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedRemoteAddress",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUseCustomAdapterParams",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedRemoteLookup",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_PAYLOAD_SIZE_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NO_EXTRA_GAS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PT_SEND", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "circulatingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "estimateSendFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flashFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceResumeReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedRemoteAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lzEndpoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDstGasLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonblockingLzReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payloadSizeLimitLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retryMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinDstGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPayloadSizeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrecrime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReceiveVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSendVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedRemoteAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUseCustomAdapterParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedRemoteLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageFailedEvent {
  export type InputTuple = [
    srcChainId: BigNumberish,
    srcAddress: BytesLike,
    nonce: BigNumberish,
    payload: BytesLike,
    reason: BytesLike
  ];
  export type OutputTuple = [
    srcChainId: bigint,
    srcAddress: string,
    nonce: bigint,
    payload: string,
    reason: string
  ];
  export interface OutputObject {
    srcChainId: bigint;
    srcAddress: string;
    nonce: bigint;
    payload: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceiveFromChainEvent {
  export type InputTuple = [
    _srcChainId: BigNumberish,
    _to: AddressLike,
    _amount: BigNumberish
  ];
  export type OutputTuple = [_srcChainId: bigint, _to: string, _amount: bigint];
  export interface OutputObject {
    _srcChainId: bigint;
    _to: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RetryMessageSuccessEvent {
  export type InputTuple = [
    srcChainId: BigNumberish,
    srcAddress: BytesLike,
    nonce: BigNumberish,
    payloadHash: BytesLike
  ];
  export type OutputTuple = [
    srcChainId: bigint,
    srcAddress: string,
    nonce: bigint,
    payloadHash: string
  ];
  export interface OutputObject {
    srcChainId: bigint;
    srcAddress: string;
    nonce: bigint;
    payloadHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SendToChainEvent {
  export type InputTuple = [
    _dstChainId: BigNumberish,
    _from: AddressLike,
    _toAddress: BytesLike,
    _amount: BigNumberish
  ];
  export type OutputTuple = [
    _dstChainId: bigint,
    _from: string,
    _toAddress: string,
    _amount: bigint
  ];
  export interface OutputObject {
    _dstChainId: bigint;
    _from: string;
    _toAddress: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMinDstGasEvent {
  export type InputTuple = [
    _dstChainId: BigNumberish,
    _type: BigNumberish,
    _minDstGas: BigNumberish
  ];
  export type OutputTuple = [
    _dstChainId: bigint,
    _type: bigint,
    _minDstGas: bigint
  ];
  export interface OutputObject {
    _dstChainId: bigint;
    _type: bigint;
    _minDstGas: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPrecrimeEvent {
  export type InputTuple = [precrime: AddressLike];
  export type OutputTuple = [precrime: string];
  export interface OutputObject {
    precrime: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTrustedRemoteEvent {
  export type InputTuple = [_remoteChainId: BigNumberish, _path: BytesLike];
  export type OutputTuple = [_remoteChainId: bigint, _path: string];
  export interface OutputObject {
    _remoteChainId: bigint;
    _path: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTrustedRemoteAddressEvent {
  export type InputTuple = [
    _remoteChainId: BigNumberish,
    _remoteAddress: BytesLike
  ];
  export type OutputTuple = [_remoteChainId: bigint, _remoteAddress: string];
  export interface OutputObject {
    _remoteChainId: bigint;
    _remoteAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetUseCustomAdapterParamsEvent {
  export type InputTuple = [_useCustomAdapterParams: boolean];
  export type OutputTuple = [_useCustomAdapterParams: boolean];
  export interface OutputObject {
    _useCustomAdapterParams: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Erc20 extends BaseContract {
  connect(runner?: ContractRunner | null): Erc20;
  waitForDeployment(): Promise<this>;

  interface: Erc20Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_PAYLOAD_SIZE_LIMIT: TypedContractMethod<[], [bigint], "view">;

  NO_EXTRA_GAS: TypedContractMethod<[], [bigint], "view">;

  PT_SEND: TypedContractMethod<[], [bigint], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;

  burnFrom: TypedContractMethod<
    [account: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  circulatingSupply: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  estimateSendFee: TypedContractMethod<
    [
      dstChainId: BigNumberish,
      toAddress: BytesLike,
      amount: BigNumberish,
      useZro: boolean,
      adapterParams: BytesLike
    ],
    [[bigint, bigint] & { nativeFee: bigint; zroFee: bigint }],
    "view"
  >;

  failedMessages: TypedContractMethod<
    [srcChainId: BigNumberish, srcAddress: BytesLike, nonce: BigNumberish],
    [string],
    "view"
  >;

  flashFee: TypedContractMethod<
    [token: AddressLike, value: BigNumberish],
    [bigint],
    "view"
  >;

  flashLoan: TypedContractMethod<
    [
      receiver: AddressLike,
      token: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  forceResumeReceive: TypedContractMethod<
    [srcChainId: BigNumberish, srcAddress: BytesLike],
    [void],
    "nonpayable"
  >;

  getConfig: TypedContractMethod<
    [
      version: BigNumberish,
      chainId: BigNumberish,
      arg2: AddressLike,
      configType: BigNumberish
    ],
    [string],
    "view"
  >;

  getTrustedRemoteAddress: TypedContractMethod<
    [remoteChainId: BigNumberish],
    [string],
    "view"
  >;

  initialize: TypedContractMethod<[_minter: AddressLike], [void], "nonpayable">;

  isTrustedRemote: TypedContractMethod<
    [srcChainId: BigNumberish, srcAddress: BytesLike],
    [boolean],
    "view"
  >;

  lzEndpoint: TypedContractMethod<[], [string], "view">;

  lzReceive: TypedContractMethod<
    [
      srcChainId: BigNumberish,
      srcAddress: BytesLike,
      nonce: BigNumberish,
      payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  maxFlashLoan: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  minDstGasLookup: TypedContractMethod<
    [dstChainId: BigNumberish, packetType: BigNumberish],
    [bigint],
    "view"
  >;

  mint: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  minter: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nonblockingLzReceive: TypedContractMethod<
    [
      srcChainId: BigNumberish,
      srcAddress: BytesLike,
      nonce: BigNumberish,
      payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  payloadSizeLimitLookup: TypedContractMethod<
    [dstChainId: BigNumberish],
    [bigint],
    "view"
  >;

  precrime: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  retryMessage: TypedContractMethod<
    [
      srcChainId: BigNumberish,
      srcAddress: BytesLike,
      nonce: BigNumberish,
      payload: BytesLike
    ],
    [void],
    "payable"
  >;

  sendFrom: TypedContractMethod<
    [
      from: AddressLike,
      dstChainId: BigNumberish,
      toAddress: BytesLike,
      amount: BigNumberish,
      refundAddress: AddressLike,
      zroPaymentAddress: AddressLike,
      adapterParams: BytesLike
    ],
    [void],
    "payable"
  >;

  setConfig: TypedContractMethod<
    [
      version: BigNumberish,
      chainId: BigNumberish,
      configType: BigNumberish,
      config: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setMinDstGas: TypedContractMethod<
    [dstChainId: BigNumberish, packetType: BigNumberish, minGas: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinter: TypedContractMethod<[_minter: AddressLike], [void], "nonpayable">;

  setPayloadSizeLimit: TypedContractMethod<
    [dstChainId: BigNumberish, size: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPrecrime: TypedContractMethod<
    [_precrime: AddressLike],
    [void],
    "nonpayable"
  >;

  setReceiveVersion: TypedContractMethod<
    [version: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSendVersion: TypedContractMethod<
    [version: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTrustedRemote: TypedContractMethod<
    [remoteChainId: BigNumberish, path: BytesLike],
    [void],
    "nonpayable"
  >;

  setTrustedRemoteAddress: TypedContractMethod<
    [remoteChainId: BigNumberish, remoteAddress: BytesLike],
    [void],
    "nonpayable"
  >;

  setUseCustomAdapterParams: TypedContractMethod<
    [useCustomAdapterParams: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  token: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  trustedRemoteLookup: TypedContractMethod<
    [remoteChainId: BigNumberish],
    [string],
    "view"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_PAYLOAD_SIZE_LIMIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NO_EXTRA_GAS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PT_SEND"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burnFrom"
  ): TypedContractMethod<
    [account: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "circulatingSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "estimateSendFee"
  ): TypedContractMethod<
    [
      dstChainId: BigNumberish,
      toAddress: BytesLike,
      amount: BigNumberish,
      useZro: boolean,
      adapterParams: BytesLike
    ],
    [[bigint, bigint] & { nativeFee: bigint; zroFee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "failedMessages"
  ): TypedContractMethod<
    [srcChainId: BigNumberish, srcAddress: BytesLike, nonce: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "flashFee"
  ): TypedContractMethod<
    [token: AddressLike, value: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "flashLoan"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      token: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "forceResumeReceive"
  ): TypedContractMethod<
    [srcChainId: BigNumberish, srcAddress: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getConfig"
  ): TypedContractMethod<
    [
      version: BigNumberish,
      chainId: BigNumberish,
      arg2: AddressLike,
      configType: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTrustedRemoteAddress"
  ): TypedContractMethod<[remoteChainId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isTrustedRemote"
  ): TypedContractMethod<
    [srcChainId: BigNumberish, srcAddress: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lzEndpoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lzReceive"
  ): TypedContractMethod<
    [
      srcChainId: BigNumberish,
      srcAddress: BytesLike,
      nonce: BigNumberish,
      payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maxFlashLoan"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDstGasLookup"
  ): TypedContractMethod<
    [dstChainId: BigNumberish, packetType: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "minter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonblockingLzReceive"
  ): TypedContractMethod<
    [
      srcChainId: BigNumberish,
      srcAddress: BytesLike,
      nonce: BigNumberish,
      payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payloadSizeLimitLookup"
  ): TypedContractMethod<[dstChainId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "precrime"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "retryMessage"
  ): TypedContractMethod<
    [
      srcChainId: BigNumberish,
      srcAddress: BytesLike,
      nonce: BigNumberish,
      payload: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      dstChainId: BigNumberish,
      toAddress: BytesLike,
      amount: BigNumberish,
      refundAddress: AddressLike,
      zroPaymentAddress: AddressLike,
      adapterParams: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setConfig"
  ): TypedContractMethod<
    [
      version: BigNumberish,
      chainId: BigNumberish,
      configType: BigNumberish,
      config: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinDstGas"
  ): TypedContractMethod<
    [dstChainId: BigNumberish, packetType: BigNumberish, minGas: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinter"
  ): TypedContractMethod<[_minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPayloadSizeLimit"
  ): TypedContractMethod<
    [dstChainId: BigNumberish, size: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPrecrime"
  ): TypedContractMethod<[_precrime: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReceiveVersion"
  ): TypedContractMethod<[version: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSendVersion"
  ): TypedContractMethod<[version: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTrustedRemote"
  ): TypedContractMethod<
    [remoteChainId: BigNumberish, path: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTrustedRemoteAddress"
  ): TypedContractMethod<
    [remoteChainId: BigNumberish, remoteAddress: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUseCustomAdapterParams"
  ): TypedContractMethod<
    [useCustomAdapterParams: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "trustedRemoteLookup"
  ): TypedContractMethod<[remoteChainId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MessageFailed"
  ): TypedContractEvent<
    MessageFailedEvent.InputTuple,
    MessageFailedEvent.OutputTuple,
    MessageFailedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ReceiveFromChain"
  ): TypedContractEvent<
    ReceiveFromChainEvent.InputTuple,
    ReceiveFromChainEvent.OutputTuple,
    ReceiveFromChainEvent.OutputObject
  >;
  getEvent(
    key: "RetryMessageSuccess"
  ): TypedContractEvent<
    RetryMessageSuccessEvent.InputTuple,
    RetryMessageSuccessEvent.OutputTuple,
    RetryMessageSuccessEvent.OutputObject
  >;
  getEvent(
    key: "SendToChain"
  ): TypedContractEvent<
    SendToChainEvent.InputTuple,
    SendToChainEvent.OutputTuple,
    SendToChainEvent.OutputObject
  >;
  getEvent(
    key: "SetMinDstGas"
  ): TypedContractEvent<
    SetMinDstGasEvent.InputTuple,
    SetMinDstGasEvent.OutputTuple,
    SetMinDstGasEvent.OutputObject
  >;
  getEvent(
    key: "SetPrecrime"
  ): TypedContractEvent<
    SetPrecrimeEvent.InputTuple,
    SetPrecrimeEvent.OutputTuple,
    SetPrecrimeEvent.OutputObject
  >;
  getEvent(
    key: "SetTrustedRemote"
  ): TypedContractEvent<
    SetTrustedRemoteEvent.InputTuple,
    SetTrustedRemoteEvent.OutputTuple,
    SetTrustedRemoteEvent.OutputObject
  >;
  getEvent(
    key: "SetTrustedRemoteAddress"
  ): TypedContractEvent<
    SetTrustedRemoteAddressEvent.InputTuple,
    SetTrustedRemoteAddressEvent.OutputTuple,
    SetTrustedRemoteAddressEvent.OutputObject
  >;
  getEvent(
    key: "SetUseCustomAdapterParams"
  ): TypedContractEvent<
    SetUseCustomAdapterParamsEvent.InputTuple,
    SetUseCustomAdapterParamsEvent.OutputTuple,
    SetUseCustomAdapterParamsEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MessageFailed(uint16,bytes,uint64,bytes,bytes)": TypedContractEvent<
      MessageFailedEvent.InputTuple,
      MessageFailedEvent.OutputTuple,
      MessageFailedEvent.OutputObject
    >;
    MessageFailed: TypedContractEvent<
      MessageFailedEvent.InputTuple,
      MessageFailedEvent.OutputTuple,
      MessageFailedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ReceiveFromChain(uint16,address,uint256)": TypedContractEvent<
      ReceiveFromChainEvent.InputTuple,
      ReceiveFromChainEvent.OutputTuple,
      ReceiveFromChainEvent.OutputObject
    >;
    ReceiveFromChain: TypedContractEvent<
      ReceiveFromChainEvent.InputTuple,
      ReceiveFromChainEvent.OutputTuple,
      ReceiveFromChainEvent.OutputObject
    >;

    "RetryMessageSuccess(uint16,bytes,uint64,bytes32)": TypedContractEvent<
      RetryMessageSuccessEvent.InputTuple,
      RetryMessageSuccessEvent.OutputTuple,
      RetryMessageSuccessEvent.OutputObject
    >;
    RetryMessageSuccess: TypedContractEvent<
      RetryMessageSuccessEvent.InputTuple,
      RetryMessageSuccessEvent.OutputTuple,
      RetryMessageSuccessEvent.OutputObject
    >;

    "SendToChain(uint16,address,bytes,uint256)": TypedContractEvent<
      SendToChainEvent.InputTuple,
      SendToChainEvent.OutputTuple,
      SendToChainEvent.OutputObject
    >;
    SendToChain: TypedContractEvent<
      SendToChainEvent.InputTuple,
      SendToChainEvent.OutputTuple,
      SendToChainEvent.OutputObject
    >;

    "SetMinDstGas(uint16,uint16,uint256)": TypedContractEvent<
      SetMinDstGasEvent.InputTuple,
      SetMinDstGasEvent.OutputTuple,
      SetMinDstGasEvent.OutputObject
    >;
    SetMinDstGas: TypedContractEvent<
      SetMinDstGasEvent.InputTuple,
      SetMinDstGasEvent.OutputTuple,
      SetMinDstGasEvent.OutputObject
    >;

    "SetPrecrime(address)": TypedContractEvent<
      SetPrecrimeEvent.InputTuple,
      SetPrecrimeEvent.OutputTuple,
      SetPrecrimeEvent.OutputObject
    >;
    SetPrecrime: TypedContractEvent<
      SetPrecrimeEvent.InputTuple,
      SetPrecrimeEvent.OutputTuple,
      SetPrecrimeEvent.OutputObject
    >;

    "SetTrustedRemote(uint16,bytes)": TypedContractEvent<
      SetTrustedRemoteEvent.InputTuple,
      SetTrustedRemoteEvent.OutputTuple,
      SetTrustedRemoteEvent.OutputObject
    >;
    SetTrustedRemote: TypedContractEvent<
      SetTrustedRemoteEvent.InputTuple,
      SetTrustedRemoteEvent.OutputTuple,
      SetTrustedRemoteEvent.OutputObject
    >;

    "SetTrustedRemoteAddress(uint16,bytes)": TypedContractEvent<
      SetTrustedRemoteAddressEvent.InputTuple,
      SetTrustedRemoteAddressEvent.OutputTuple,
      SetTrustedRemoteAddressEvent.OutputObject
    >;
    SetTrustedRemoteAddress: TypedContractEvent<
      SetTrustedRemoteAddressEvent.InputTuple,
      SetTrustedRemoteAddressEvent.OutputTuple,
      SetTrustedRemoteAddressEvent.OutputObject
    >;

    "SetUseCustomAdapterParams(bool)": TypedContractEvent<
      SetUseCustomAdapterParamsEvent.InputTuple,
      SetUseCustomAdapterParamsEvent.OutputTuple,
      SetUseCustomAdapterParamsEvent.OutputObject
    >;
    SetUseCustomAdapterParams: TypedContractEvent<
      SetUseCustomAdapterParamsEvent.InputTuple,
      SetUseCustomAdapterParamsEvent.OutputTuple,
      SetUseCustomAdapterParamsEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
