/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common.js";

export interface LiquidBoxInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE_PRECISION"
      | "MAX_FEE"
      | "PRECISION"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "baseLower"
      | "baseUpper"
      | "boxFactory"
      | "claimFees"
      | "claimManagementFees"
      | "currentTick"
      | "decimals"
      | "decreaseAllowance"
      | "deposit"
      | "directDeposit"
      | "earnedFees"
      | "fee"
      | "feePerShare"
      | "feePerShareClaimed"
      | "feesOwed"
      | "gauge"
      | "getBalance0"
      | "getBalance1"
      | "getManagementFees"
      | "getPoolLiquidityPerShare"
      | "getPoolParams"
      | "getRequiredAmountsForInput"
      | "getSharesAmount"
      | "getSqrtTwapX96"
      | "getTotalAmounts"
      | "increaseAllowance"
      | "initialize"
      | "isMinting"
      | "lastTimestamp"
      | "managementFees"
      | "max0"
      | "max1"
      | "maxTotalSupply"
      | "name"
      | "owner"
      | "poke"
      | "pool"
      | "poolFee"
      | "pullLiquidity"
      | "rebalance"
      | "setFee"
      | "setGauge"
      | "setMaxTotalSupply"
      | "setOwner"
      | "symbol"
      | "tickSpacing"
      | "toggleDirectDeposit"
      | "token0"
      | "token1"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "uniswapV3MintCallback"
      | "usersFees"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ClaimFees"
      | "ClaimManagementFee"
      | "CollectFees"
      | "Deposit"
      | "DirectDeposit"
      | "FeeChanged"
      | "GaugeChanged"
      | "Initialized"
      | "OwnerChanged"
      | "Rebalance"
      | "Transfer"
      | "UpdateMaxTotalSupply"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FEE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "baseLower", values?: undefined): string;
  encodeFunctionData(functionFragment: "baseUpper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "boxFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimFees",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimManagementFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentTick",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "directDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earnedFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feePerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feePerShareClaimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feesOwed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "gauge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBalance0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getManagementFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolLiquidityPerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredAmountsForInput",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSharesAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSqrtTwapX96",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAmounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, string, string]
  ): string;
  encodeFunctionData(functionFragment: "isMinting", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managementFees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "max0", values?: undefined): string;
  encodeFunctionData(functionFragment: "max1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "poke", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pullLiquidity",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalance",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGauge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTotalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tickSpacing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleDirectDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3MintCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "usersFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseLower", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseUpper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boxFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimManagementFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "directDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earnedFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feePerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feePerShareClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feesOwed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gauge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBalance0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalance1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManagementFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolLiquidityPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredAmountsForInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSharesAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSqrtTwapX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMinting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managementFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "max0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "max1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pullLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGauge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tickSpacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleDirectDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3MintCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usersFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimFeesEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    feesToOwner0: BigNumberish,
    feesToOwner1: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    feesToOwner0: bigint,
    feesToOwner1: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    feesToOwner0: bigint;
    feesToOwner1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimManagementFeeEvent {
  export type InputTuple = [
    feesToOwner0: BigNumberish,
    feesToOwner1: BigNumberish,
    emissionToOwner: BigNumberish
  ];
  export type OutputTuple = [
    feesToOwner0: bigint,
    feesToOwner1: bigint,
    emissionToOwner: bigint
  ];
  export interface OutputObject {
    feesToOwner0: bigint;
    feesToOwner1: bigint;
    emissionToOwner: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectFeesEvent {
  export type InputTuple = [
    feesToVault0: BigNumberish,
    feesToVault1: BigNumberish,
    feesToOwner0: BigNumberish,
    feesToOwner1: BigNumberish
  ];
  export type OutputTuple = [
    feesToVault0: bigint,
    feesToVault1: bigint,
    feesToOwner0: bigint,
    feesToOwner1: bigint
  ];
  export interface OutputObject {
    feesToVault0: bigint;
    feesToVault1: bigint;
    feesToOwner0: bigint;
    feesToOwner1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    sender: AddressLike,
    to: AddressLike,
    shares: BigNumberish,
    amount0: BigNumberish,
    amount1: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    to: string,
    shares: bigint,
    amount0: bigint,
    amount1: bigint
  ];
  export interface OutputObject {
    sender: string;
    to: string;
    shares: bigint;
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DirectDepositEvent {
  export type InputTuple = [isTrue: boolean];
  export type OutputTuple = [isTrue: boolean];
  export interface OutputObject {
    isTrue: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeChangedEvent {
  export type InputTuple = [fee: BigNumberish];
  export type OutputTuple = [fee: bigint];
  export interface OutputObject {
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GaugeChangedEvent {
  export type InputTuple = [gauge: AddressLike];
  export type OutputTuple = [gauge: string];
  export interface OutputObject {
    gauge: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerChangedEvent {
  export type InputTuple = [owner: AddressLike];
  export type OutputTuple = [owner: string];
  export interface OutputObject {
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalanceEvent {
  export type InputTuple = [
    tick: BigNumberish,
    totalAmount0: BigNumberish,
    totalAmount1: BigNumberish,
    totalSupply: BigNumberish
  ];
  export type OutputTuple = [
    tick: bigint,
    totalAmount0: bigint,
    totalAmount1: bigint,
    totalSupply: bigint
  ];
  export interface OutputObject {
    tick: bigint;
    totalAmount0: bigint;
    totalAmount1: bigint;
    totalSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateMaxTotalSupplyEvent {
  export type InputTuple = [maxTotalSupply: BigNumberish];
  export type OutputTuple = [maxTotalSupply: bigint];
  export interface OutputObject {
    maxTotalSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    sender: AddressLike,
    to: AddressLike,
    shares: BigNumberish,
    amount0: BigNumberish,
    amount1: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    to: string,
    shares: bigint,
    amount0: bigint,
    amount1: bigint
  ];
  export interface OutputObject {
    sender: string;
    to: string;
    shares: bigint;
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LiquidBox extends BaseContract {
  connect(runner?: ContractRunner | null): LiquidBox;
  waitForDeployment(): Promise<this>;

  interface: LiquidBoxInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE_PRECISION: TypedContractMethod<[], [bigint], "view">;

  MAX_FEE: TypedContractMethod<[], [bigint], "view">;

  PRECISION: TypedContractMethod<[], [bigint], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  baseLower: TypedContractMethod<[], [bigint], "view">;

  baseUpper: TypedContractMethod<[], [bigint], "view">;

  boxFactory: TypedContractMethod<[], [string], "view">;

  claimFees: TypedContractMethod<
    [from: AddressLike, to: AddressLike],
    [[bigint, bigint] & { collectedfees0: bigint; collectedfees1: bigint }],
    "nonpayable"
  >;

  claimManagementFees: TypedContractMethod<
    [to: AddressLike],
    [
      [bigint, bigint, bigint] & {
        collectedfees0: bigint;
        collectedfees1: bigint;
        emissionToOwner: bigint;
      }
    ],
    "nonpayable"
  >;

  currentTick: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      to: AddressLike,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        shares: bigint;
        amount0: bigint;
        amount1: bigint;
      }
    ],
    "nonpayable"
  >;

  directDeposit: TypedContractMethod<[], [boolean], "view">;

  earnedFees: TypedContractMethod<
    [account: AddressLike],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "view"
  >;

  fee: TypedContractMethod<[], [bigint], "view">;

  feePerShare: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        feeGrowthInside0LastX128: bigint;
        feeGrowthInside1LastX128: bigint;
      }
    ],
    "view"
  >;

  feePerShareClaimed: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        feeGrowthInside0LastX128: bigint;
        feeGrowthInside1LastX128: bigint;
      }
    ],
    "view"
  >;

  feesOwed: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        feeGrowthInside0LastX128: bigint;
        feeGrowthInside1LastX128: bigint;
      }
    ],
    "view"
  >;

  gauge: TypedContractMethod<[], [string], "view">;

  getBalance0: TypedContractMethod<[], [bigint], "view">;

  getBalance1: TypedContractMethod<[], [bigint], "view">;

  getManagementFees: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        claimable0: bigint;
        claimable1: bigint;
        claimableEmission: bigint;
      }
    ],
    "view"
  >;

  getPoolLiquidityPerShare: TypedContractMethod<[], [bigint], "view">;

  getPoolParams: TypedContractMethod<[], [[string, string, bigint]], "view">;

  getRequiredAmountsForInput: TypedContractMethod<
    [amount0: BigNumberish, amount1: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;

  getSharesAmount: TypedContractMethod<
    [shares: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        liquidity: bigint;
      }
    ],
    "view"
  >;

  getSqrtTwapX96: TypedContractMethod<
    [twapInterval: BigNumberish],
    [[bigint, bigint] & { sqrtPriceX96: bigint; sqrtPriceX96Twap: bigint }],
    "view"
  >;

  getTotalAmounts: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        total0: bigint;
        total1: bigint;
        pool0: bigint;
        pool1: bigint;
        liquidity: bigint;
      }
    ],
    "view"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [
      _pool: AddressLike,
      _owner: AddressLike,
      _boxFactory: AddressLike,
      _name: string,
      _symbol: string
    ],
    [void],
    "nonpayable"
  >;

  isMinting: TypedContractMethod<[], [boolean], "view">;

  lastTimestamp: TypedContractMethod<[], [bigint], "view">;

  managementFees: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        feeGrowthInside0LastX128: bigint;
        feeGrowthInside1LastX128: bigint;
      }
    ],
    "view"
  >;

  max0: TypedContractMethod<[], [bigint], "view">;

  max1: TypedContractMethod<[], [bigint], "view">;

  maxTotalSupply: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  poke: TypedContractMethod<[], [void], "nonpayable">;

  pool: TypedContractMethod<[], [string], "view">;

  poolFee: TypedContractMethod<[], [bigint], "view">;

  pullLiquidity: TypedContractMethod<
    [
      _baseLower: BigNumberish,
      _baseUpper: BigNumberish,
      _shares: BigNumberish,
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  rebalance: TypedContractMethod<
    [
      _baseLower: BigNumberish,
      _baseUpper: BigNumberish,
      _amount0MinBurn: BigNumberish,
      _amount1MinBurn: BigNumberish,
      _amount0MinMint: BigNumberish,
      _amount1MinMint: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setFee: TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;

  setGauge: TypedContractMethod<[_gauge: AddressLike], [void], "nonpayable">;

  setMaxTotalSupply: TypedContractMethod<
    [_maxTotalSupply: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOwner: TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;

  symbol: TypedContractMethod<[], [string], "view">;

  tickSpacing: TypedContractMethod<[], [bigint], "view">;

  toggleDirectDeposit: TypedContractMethod<[], [void], "nonpayable">;

  token0: TypedContractMethod<[], [string], "view">;

  token1: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  uniswapV3MintCallback: TypedContractMethod<
    [amount0: BigNumberish, amount1: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;

  usersFees: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        feeGrowthInside0LastX128: bigint;
        feeGrowthInside1LastX128: bigint;
      }
    ],
    "view"
  >;

  withdraw: TypedContractMethod<
    [
      shares: BigNumberish,
      from: AddressLike,
      to: AddressLike,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish
    ],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseLower"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseUpper"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "boxFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimFees"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike],
    [[bigint, bigint] & { collectedfees0: bigint; collectedfees1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimManagementFees"
  ): TypedContractMethod<
    [to: AddressLike],
    [
      [bigint, bigint, bigint] & {
        collectedfees0: bigint;
        collectedfees1: bigint;
        emissionToOwner: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentTick"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      to: AddressLike,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        shares: bigint;
        amount0: bigint;
        amount1: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "directDeposit"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "earnedFees"
  ): TypedContractMethod<
    [account: AddressLike],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feePerShare"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        feeGrowthInside0LastX128: bigint;
        feeGrowthInside1LastX128: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "feePerShareClaimed"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        feeGrowthInside0LastX128: bigint;
        feeGrowthInside1LastX128: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "feesOwed"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        feeGrowthInside0LastX128: bigint;
        feeGrowthInside1LastX128: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "gauge"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBalance0"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBalance1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getManagementFees"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        claimable0: bigint;
        claimable1: bigint;
        claimableEmission: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolLiquidityPerShare"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPoolParams"
  ): TypedContractMethod<[], [[string, string, bigint]], "view">;
  getFunction(
    nameOrSignature: "getRequiredAmountsForInput"
  ): TypedContractMethod<
    [amount0: BigNumberish, amount1: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSharesAmount"
  ): TypedContractMethod<
    [shares: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        liquidity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSqrtTwapX96"
  ): TypedContractMethod<
    [twapInterval: BigNumberish],
    [[bigint, bigint] & { sqrtPriceX96: bigint; sqrtPriceX96Twap: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalAmounts"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        total0: bigint;
        total1: bigint;
        pool0: bigint;
        pool1: bigint;
        liquidity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _pool: AddressLike,
      _owner: AddressLike,
      _boxFactory: AddressLike,
      _name: string,
      _symbol: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isMinting"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "managementFees"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        feeGrowthInside0LastX128: bigint;
        feeGrowthInside1LastX128: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "max0"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "max1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxTotalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poke"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pullLiquidity"
  ): TypedContractMethod<
    [
      _baseLower: BigNumberish,
      _baseUpper: BigNumberish,
      _shares: BigNumberish,
      _amount0Min: BigNumberish,
      _amount1Min: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rebalance"
  ): TypedContractMethod<
    [
      _baseLower: BigNumberish,
      _baseUpper: BigNumberish,
      _amount0MinBurn: BigNumberish,
      _amount1MinBurn: BigNumberish,
      _amount0MinMint: BigNumberish,
      _amount1MinMint: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGauge"
  ): TypedContractMethod<[_gauge: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxTotalSupply"
  ): TypedContractMethod<[_maxTotalSupply: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tickSpacing"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "toggleDirectDeposit"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token0"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uniswapV3MintCallback"
  ): TypedContractMethod<
    [amount0: BigNumberish, amount1: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usersFees"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        feeGrowthInside0LastX128: bigint;
        feeGrowthInside1LastX128: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      shares: BigNumberish,
      from: AddressLike,
      to: AddressLike,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish
    ],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ClaimFees"
  ): TypedContractEvent<
    ClaimFeesEvent.InputTuple,
    ClaimFeesEvent.OutputTuple,
    ClaimFeesEvent.OutputObject
  >;
  getEvent(
    key: "ClaimManagementFee"
  ): TypedContractEvent<
    ClaimManagementFeeEvent.InputTuple,
    ClaimManagementFeeEvent.OutputTuple,
    ClaimManagementFeeEvent.OutputObject
  >;
  getEvent(
    key: "CollectFees"
  ): TypedContractEvent<
    CollectFeesEvent.InputTuple,
    CollectFeesEvent.OutputTuple,
    CollectFeesEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "DirectDeposit"
  ): TypedContractEvent<
    DirectDepositEvent.InputTuple,
    DirectDepositEvent.OutputTuple,
    DirectDepositEvent.OutputObject
  >;
  getEvent(
    key: "FeeChanged"
  ): TypedContractEvent<
    FeeChangedEvent.InputTuple,
    FeeChangedEvent.OutputTuple,
    FeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "GaugeChanged"
  ): TypedContractEvent<
    GaugeChangedEvent.InputTuple,
    GaugeChangedEvent.OutputTuple,
    GaugeChangedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerChanged"
  ): TypedContractEvent<
    OwnerChangedEvent.InputTuple,
    OwnerChangedEvent.OutputTuple,
    OwnerChangedEvent.OutputObject
  >;
  getEvent(
    key: "Rebalance"
  ): TypedContractEvent<
    RebalanceEvent.InputTuple,
    RebalanceEvent.OutputTuple,
    RebalanceEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "UpdateMaxTotalSupply"
  ): TypedContractEvent<
    UpdateMaxTotalSupplyEvent.InputTuple,
    UpdateMaxTotalSupplyEvent.OutputTuple,
    UpdateMaxTotalSupplyEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ClaimFees(address,address,uint256,uint256)": TypedContractEvent<
      ClaimFeesEvent.InputTuple,
      ClaimFeesEvent.OutputTuple,
      ClaimFeesEvent.OutputObject
    >;
    ClaimFees: TypedContractEvent<
      ClaimFeesEvent.InputTuple,
      ClaimFeesEvent.OutputTuple,
      ClaimFeesEvent.OutputObject
    >;

    "ClaimManagementFee(uint256,uint256,uint256)": TypedContractEvent<
      ClaimManagementFeeEvent.InputTuple,
      ClaimManagementFeeEvent.OutputTuple,
      ClaimManagementFeeEvent.OutputObject
    >;
    ClaimManagementFee: TypedContractEvent<
      ClaimManagementFeeEvent.InputTuple,
      ClaimManagementFeeEvent.OutputTuple,
      ClaimManagementFeeEvent.OutputObject
    >;

    "CollectFees(uint256,uint256,uint256,uint256)": TypedContractEvent<
      CollectFeesEvent.InputTuple,
      CollectFeesEvent.OutputTuple,
      CollectFeesEvent.OutputObject
    >;
    CollectFees: TypedContractEvent<
      CollectFeesEvent.InputTuple,
      CollectFeesEvent.OutputTuple,
      CollectFeesEvent.OutputObject
    >;

    "Deposit(address,address,uint256,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "DirectDeposit(bool)": TypedContractEvent<
      DirectDepositEvent.InputTuple,
      DirectDepositEvent.OutputTuple,
      DirectDepositEvent.OutputObject
    >;
    DirectDeposit: TypedContractEvent<
      DirectDepositEvent.InputTuple,
      DirectDepositEvent.OutputTuple,
      DirectDepositEvent.OutputObject
    >;

    "FeeChanged(uint24)": TypedContractEvent<
      FeeChangedEvent.InputTuple,
      FeeChangedEvent.OutputTuple,
      FeeChangedEvent.OutputObject
    >;
    FeeChanged: TypedContractEvent<
      FeeChangedEvent.InputTuple,
      FeeChangedEvent.OutputTuple,
      FeeChangedEvent.OutputObject
    >;

    "GaugeChanged(address)": TypedContractEvent<
      GaugeChangedEvent.InputTuple,
      GaugeChangedEvent.OutputTuple,
      GaugeChangedEvent.OutputObject
    >;
    GaugeChanged: TypedContractEvent<
      GaugeChangedEvent.InputTuple,
      GaugeChangedEvent.OutputTuple,
      GaugeChangedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnerChanged(address)": TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;
    OwnerChanged: TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;

    "Rebalance(int24,uint256,uint256,uint256)": TypedContractEvent<
      RebalanceEvent.InputTuple,
      RebalanceEvent.OutputTuple,
      RebalanceEvent.OutputObject
    >;
    Rebalance: TypedContractEvent<
      RebalanceEvent.InputTuple,
      RebalanceEvent.OutputTuple,
      RebalanceEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "UpdateMaxTotalSupply(uint256)": TypedContractEvent<
      UpdateMaxTotalSupplyEvent.InputTuple,
      UpdateMaxTotalSupplyEvent.OutputTuple,
      UpdateMaxTotalSupplyEvent.OutputObject
    >;
    UpdateMaxTotalSupply: TypedContractEvent<
      UpdateMaxTotalSupplyEvent.InputTuple,
      UpdateMaxTotalSupplyEvent.OutputTuple,
      UpdateMaxTotalSupplyEvent.OutputObject
    >;

    "Withdraw(address,address,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
